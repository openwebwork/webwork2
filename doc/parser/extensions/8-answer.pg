##########################################################
#
#  Example showing an answer checker that uses the parser
#  in an unsophisticated way.
#

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGbasicmacros.pl",
  "PGanswermacros.pl",
  "Parser.pl",
);

TEXT(beginproblem());

##########################################################
#
#  Use Vector context
#

Context('Vector');

##########################################################
#
#  Make the answer checker
#
sub vector_cmp {
  my $v = shift;
  die "vector_cmp requires a vector" unless defined $v;
  my $v = Vector($v);  # covert to vector if it isn't already
  my $ans = new AnswerEvaluator;
  $ans->ans_hash(type => "vector",correct_ans => $v->string, vector=>$v);
  $ans->install_evaluator(~~&vector_cmp_check);
  return $ans;
}

sub vector_cmp_check {
  my $ans = shift; my $v = $ans->{vector},
  $ans->score(0);  # assume failure
  my $student = $ans->{student_ans};
  #
  #  Make student answer safe to eval by doubling \ and quoting '
  #
  $student =~ s/~~~~/~~~~~~~~/g; $student =~ s/'/~~~~'/g; # remember that ~~ means \
  my ($fV,$err) = PG_restricted_eval('$f = Formula(~~''.$student.'~~'); [$f,$f->eval]');
  if (defined $fV) {
    my ($f,$V) = @{$fV}; # extract the formula and is value
    $ans->{preview_latex_string} = $f->TeX;
    $ans->{preview_text_string} = $f->string;
    $ans->{student_ans} = Formula($V)->string;
    if (Value::isValue($V) && $V->type eq 'Vector') {
      #
      #  Let the overloaded == do the check
      #    (should really make it do fuzzy checking)
      #
      $ans->score(1) if ($V == $v);
    } else {
      $ans->{ans_message} = $ans->{error_message} =
         "Your answer doesn't seem to be a Vector" unless $inputs_ref->{previewAnswers};
    }
  } else {
    #
    #  Student answer evaluation Failed.
    #  Report the error, with formatting, if possible.
    #
    my $context = Context();
    my $message = $context->{error}{message};
    if ($context->{error}{pos}) {
      my $string = $context->{error}{string};
      my ($s,$e) = @{$context->{error}{pos}};
      $message =~ s/; see.*//;  # remove the position from the message
      $ans->{student_ans} = substr($string,0,$s) .
                 '<SPAN CLASS="parsehilight">' . substr($string,$s,$e-$s) . '</SPAN>' .
                 substr($string,$e);
    }
    $ans->{ans_message} = $ans->{error_message} = $message;
  }
  return $ans;
}

##########################################################
#
#  The problem text
#

$V = Vector(1,2,3);

Context()->constants->add(a=>1,b=>1,c=>1);

BEGIN_TEXT
Enter the vector \(\{$V->TeX\}\) in any way you like: \{ans_rule(20)\}.
$PAR
You can use either \(\{Formula("<a,b,c>")->TeX\}\)
or \(\{Formula("ai+bj+ck")->TeX\}\) notation,$BR
and can perform vector operations to produce your answer.
END_TEXT

###########################################################
#
#  The answer
#

ANS(vector_cmp($V));

###########################################################

ENDDOCUMENT();        # This should be the last executable line in the problem.