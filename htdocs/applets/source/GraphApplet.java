/*   Modified June 10, 2000 to add some public methods that are   meant to be called from JavaScript.  The following applet    parameters were also added:       Param name    Default value  Meaning       ----------    -------------  -------       parameter,       none        The name of a variable, other than "x"        parameter1,                     that can be used as a parameter in        parameter2,                     the definition of the function.        ...                             Their values can be set and queried                                        by calling public methods.       value,           0           Initial values for the parameters.        value1,        value2,        ...*//*   GraphApplet displays the graph of a mathematical function.  It can   be configured with the following applet parameters:          Param name  Default value  Meaning       ----------  -------------  -------        userInput   no             If set to yes, there will be an input                                        box where the user can enter the                                        definition of the function.        userLimits  no             If set to yes, there will be a set                                        of inputs which control the x and                                        y limits on the graph.        userZoom    no             If set to yes, the user can zoom in on                                        a point by clicking on it, and zoom                                        out by shift-clicking.        function    abs(x) ^ x     The function to be graphed, or if userInput                                        is set to "yes", the initial function.        limits      -5 5 -5 5      Four numbers giving the x and y limits on                                        the graph (xmin, xmax, ymin, ymax).                                        Numbers can be separated by spaces or                                        commas.    The definition of a function can include: numbers, the variable x, the   operators + - * / ^ and ! (where ^ represents exponentiation), and the   functions sin, cos, tan, sec, csc, cot, arcsin, arccos, arctan, ln, log2,   log10, exp, abs, sqrt, cubert, trunc, round, and ceiling.  It can also   include a "?:" conditional operator in the style of the C programming   language:  test ? value1 : value2  where test can include the logical   operators:  < <= = > >= and or not.  (The ": value2" part is optional.)   There is also a sum operation:  sum(sumationVariable, start, end, expression).   For example:  sum(i, 0, k, x^i / i!)                                           This applet is part of the mathbeans package, and it must be used in   an <applet> tag with code="mathbeans.GraphApplet.class" and with   mathbeans.jar available as an archive.  See the mathbeans web site   at http://math.hws.edu/mathbeans/ for more information.      David Eck (eck@hws.edu, http://math.hws.edu/eck/)   26 August 1999*/package mathbeans;import mathbeans.awt.*;import mathbeans.data.*;import mathbeans.draw.*;import java.awt.*;import java.awt.event.*;import java.applet.Applet;public class GraphApplet extends Applet {   /*       Some public methods for calling from JavaScript   */      public void setFunction(String funcDef) {      if (functionInput == null) {         if (functionLabel != null)            functionLabel.setText(funcDef);         try {            functionParser.getSymbolTable().remove("f");            Function f = functionParser.defineFunction("f","x",funcDef);            graph.setFunction(f);            mainPanel.compute();         }         catch (ParseError e) {            graph.setFunction(null);            canvas.setErrorMessage("Error in function definition: " + e);         }      }      else {         functionInput.setText(funcDef);         funcDefString = funcDef;         mainPanel.compute();      }   }      public String getFunction() {      if (functionInput != null) {         mainPanel.compute();         return functionInput.getText();      }      else {         return funcDefString;      }   }      public void setLimits(double xmin, double xmax, double ymin, double ymax) {      coordRect.setLimits(xmin,xmax,ymin,ymax);   }      public boolean setVariableValue(String name, double val) {      MathObject obj = functionParser.getSymbol(name);      if (obj != null && obj instanceof Variable) {         ((Variable)obj).setValue(val);         mainPanel.compute();         return true;      }      else {         return false;      }   }      public boolean defineNewVariable(String name) {      if (name != null && functionParser.getSymbol(name) == null) {         functionParser.defineVariable(name);         return true;      }      else {         return false;      }   }      public double getVariableValue(String name) {      MathObject obj = functionParser.getSymbol(name);      if (obj != null && obj instanceof Variable)         return ((Variable)obj).getValue();      else         return Double.NaN;   }      // Variables introduced for use in the above routines.   // They are set in the init() method.      private MathBeanPanel mainPanel;   // Main MathBeanPanel for the applet.   private CoordinateRect coordRect;  // Coordinate rect for the canvas.   private ExpressionFunctionInput functionInput;  // Input box, if userInput is "yes"   private Label functionLabel;   // Label that shows definition, if userInput is "no"   private String funcDefString;  // String that defines function, if userInput is "no"   private Parser functionParser; // Parser used to define function.   private Graph1D graph;         // Graph that shows the function.      //----------------------------------------------------   public void init() {         /*  The init method sets up the interface of the applet.  For a "mathbean"       *  applet, this is all you have to do, since interface components take care       *  of themselves once they have been created and properly configured.       *     The entire applet is filled by a "MathBeanPanel", which coordinates       *  the activities of the mathematical components that it contains.       *  "panel.setInsetGap(3) leaves a 3-pixel border between the edge of the       *  panel and the components that it contains.       */      MathBeanPanel panel = new MathBeanPanel();      mainPanel = panel;  // new, for Javascript      panel.setInsetGap(3);      setLayout(new BorderLayout());      add(panel,BorderLayout.CENTER);            /*  A parser knows how to convert a string that represents a mathematical       *  expression into an internal form that can be used for computation.       *  Every mathbeans application needs at least one parser.       */      Parser parser = new Parser();      functionParser = parser;            /* New for JavaScript:  Get names of variables from applet params.  These       * variables can be used in the function.  Their values can be set and       * tested by calling the above public methods.       */            String name = getParameter("parameter");      String val = getParameter("value");      int ct = 0;      if (name == null) {         ct++;         name = getParameter("parameter1");         val = getParameter("value1");      }      while (name != null) {         Variable v = parser.defineVariable(name);         if (val != null) {            double[] value = Util.extractNumbers(val);            if (value != null && value.length > 0)               v.setValue(value[0]);            else               v.setValue(0);         }         ct++;         name = getParameter("parameter" + ct);         val = getParameter("value" + ct);      }            /*  This section defines the function that is to be graphed, either as       *  as a fixed function or as a user input function.  The call to       *  getParameter("function") gets the value of the applet param with       *  name="function", if one has been provided in the <applet> tag.       *  If not, the value will be null.  In that case, use a default       *  function.       */                        Function func;  // The function to be graphed.      String functionDef = getParameter("function");      if (functionDef == null)         functionDef = "abs(x) ^ x";            if ("yes".equalsIgnoreCase(getParameter("userInput"))) {             // Function can be entered by user.  Use an             // ExpressionFunctionInput box for user input.         ExpressionFunctionInput in =                           new ExpressionFunctionInput("f","x",parser,functionDef);         MathBeanPanel top = new MathBeanPanel();             // in.withLabel() is a component consisting of the input             // box together with a lable "f(x)=" at its left.         top.add(in.withLabel(), BorderLayout.CENTER);         Button button = new Button("Use New Data");             // The next two lines cause the panel to recompute its contents             // -- that is, to graph the new function -- when the user clicks             // the button or presses return in the input box.  A MathBeanPanel             // always responds to events by recomputing everything.         button.addActionListener(panel);         in.addActionListener(panel);         top.add(button, BorderLayout.EAST);             // The ExpressionInputBox has an associated Function object,             // representing the function defined by the user's input.             // This is the function that is to be graphed.  The definition             // of the function changes whenever the panel recomputes its             // contents (in this applet, when the user clicks the button or             // presses return in the function input box).         func = in.getFunction();         panel.add(top, BorderLayout.NORTH);         functionInput = in;   // new, for Javascript      }      else {            // The graph will show a fixed function, defined by functionDef.            // If there is an error in the function definition, a ParseError            // will be thrown.  In that case, use the default function.         try {            func = parser.defineFunction("f","x",functionDef);         }         catch (ParseError e) {            func = null;         }         if (func == null) {            try {               functionDef = "abs(x) ^ x";               func = parser.defineFunction("f","x",functionDef);            }            catch (ParseError e) {                  // There shouldn't be an error here, unless the programmer makes                  // an error in the default function.  However, ParseErrors must                  // always be handled in a try..catch.  Print an error to the                  // console for debugging.               System.out.println("Unexpected parse error in init(): " + e.getMessage());            }         }         Label lbl = new Label("f(x) = " + functionDef, Label.CENTER);         panel.add(lbl, BorderLayout.NORTH);         functionLabel = lbl;  // new, for JavaScript         funcDefString = functionDef;  // new, for JavaScript      }            /*  Get the xy limits specified by the user, if any.  If there is no "limits"       *  param in the <applet> tag or if the value of the param is illegal, use       *  a default value of -5,5,-5,5.  The routine Util.extractNumbers(String)       *  converts a string consisting of a list of numbers into an array of doubles.       */            double[] limits = Util.extractNumbers(getParameter("limits"));      if (limits == null || limits.length < 4)         limits = new double[] { -5,5,-5,5 };               /*  Create the canvas and add it to the panel.  The call to       *  panel.setErrorReporter(canvas) means that if an error is       *  found in user input, an error message will be display on       *  the canvas.  Otherwise, the error would be reported in       *  a dialog box, which is probably not a good idea in an applet.       *  A DisplayCanvas can display various graphical       *  objects, including axes and graphs.  These objects are subclasses       *  of the class "Drawable".  In this case the Drawable objects        *  displayed by the canvas are a set of axes, the graph of func,       *  and a one-pixel black border around the canvas.  The canvas has       *  a CoordinateRect, which lays down an xy-coordinate system on       *  the canvas.  The axes and graph use this coordinate system.              */      canvas = new DisplayCanvas();   // declared below, outside the init() routine      panel.setErrorReporter(canvas);      CoordinateRect cr = new CoordinateRect(limits[0],limits[1],limits[2],limits[3]);      coordRect = cr;  // new, for JavaScript      canvas.addCoordinateRect(cr);      canvas.add(new Axes());      graph = new Graph1D(func);  // new, for JavaScript      canvas.add(graph);      canvas.add(new DrawBorder());      panel.add(canvas, BorderLayout.CENTER);            /*  If the user is allowed to change xy limits, add a "control panel"       *  for this on the right edge of the applet.   Here, some extra buttons        *  are added to a standard LimitControlPanel.  The "ZoomButtons"       *  let the user zoom in or out on the graph by clicking a button.       *  The "RestoreButton" will restore the original limits from when       *  the applet was first created.       */            if ("yes".equalsIgnoreCase(getParameter("userLimits"))) {         LimitControlPanel lcp = new LimitControlPanel(canvas.getCoordinateRect(0));         lcp.addZoomButtons();         lcp.addRestoreButton();         panel.add(lcp, BorderLayout.EAST);      }            /*  If "userZoom" is enabled, call canvas.setHandleMouseZooms(true).  This        *  will let the user zoom in on a point on the graph by clicking on the       *  canvas.  The user can zoom out from a point by clicking with the shift       *  key held down.       */            if ("yes".equalsIgnoreCase(getParameter("userZoom")))         canvas.setHandleMouseZooms(true);         }  // end init()      private DisplayCanvas canvas;  // The canvas used in the applet      public void stop() {         // When the applet is stopped, be polite by releasing the         // canvas's fairly large amount of allocated memory.      canvas.releaseResources();   }            }  // end class GraphApplet