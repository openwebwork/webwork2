{
  "name": "imagesloaded",
  "version": "3.0.1",
  "description": "JavaScript is all like _You images done yet or what?_",
  "main": "imagesloaded.js",
  "dependencies": {
    "eventEmitter": "4.x",
    "eventie": "desandro/eventie#>=1.0.3"
  },
  "devDependencies": {
    "jquery": "~1.9",
    "qunit": ">=1.10"
  },
  "gitHead": "f89b708485e17be28d4ff42cf077b037bc74e731",
  "readme": "# imagesLoaded\n\n<p class=\"tagline\">JavaScript is all like \"You images done yet or what?\"</p>\n\n[desandro.github.io/imagesloaded](http://desandro.github.io/imagesloaded/)\n\nDetect when images have been loaded.\n\n<!-- demo -->\n\n## Install\n\nGet a packaged source file:\n\n+ [imagesloaded.pkgd.min.js](http://desandro.github.io/imagesloaded/imagesloaded.pkgd.min.js)\n+ [imagesloaded.pkgd.js](http://desandro.github.io/imagesloaded/imagesloaded.pkgd.js)\n\nOr install via [Bower](http://bower.io):\n\n``` bash\nbower install imagesloaded\n```\n\n## Usage\n\n``` js\nimagesLoaded( elem, callback )\n// you can use `new` if you like\nnew imagesLoaded( elem, callback )\n```\n\n+ `elem` _Element, NodeList, Array, or Selector String_\n+ `callback` _Function_ - function triggered after all images have been loaded\n\nUsing a callback function is the same as binding it to the `always` event (see below).\n\n``` js\n// element\nimagesLoaded( document.querySelector('#container'), function( instance ) {\n  console.log('all images are loaded');\n});\n// selector string\nimagesLoaded( '#container', function() {...});\n// multiple elements\nvar posts = document.querySelectorAll('.post');\nimagesLoaded( posts, function() {...});\n```\n\n\n## Events\n\nimagesLoaded is an Event Emitter. You can bind event listeners to events.\n\n``` js\nvar imgLoad = imagesLoaded( elem );\nfunction onAlways( instance ) {\n  console.log('all images are loaded');\n}\n// bind with .on()\nimgLoad.on( 'always', onAlways );\n// unbind with .off()\nimgLoad.off( 'always', onAlways );\n```\n\n### always\n\n``` js\nimgLoad.on( 'always', function( instance ) {\n  console.log('ALWAYS - all images have been loaded');\n});\n```\n\nTriggered after all images have been either loaded or confirmed broken.\n\n+ `instance` _imagesLoaded_ - the imagesLoaded instance\n\n### done\n\n``` js\nimgLoad.on( 'done', function( instance ) {\n  console.log('DONE  - all images have been successfully loaded');\n});\n```\n\nTriggered after all images have successfully loaded without any broken images.\n\n### fail\n\n``` js\nimgLoad.on( 'fail', function( instance ) {\n  console.log('FAIL - all images loaded, at least one is broken');\n});\n```\n\nTriggered after all images have been loaded with at least one broken image.\n\n### progress\n\n``` js\nimgLoad.on( 'progress', function( instance, image ) {\n  var result = image.isLoaded ? 'loaded' : 'broken';\n  console.log( 'image is ' + result + ' for ' + image.img.src );\n});\n```\n\nTriggered after each image has been loaded.\n\n+ `instance` _imagesLoaded_ - the imagesLoaded instance\n+ `image` _LoadingImage_ - the LoadingImage instance of the loaded image\n\n## Properties\n\n### LoadingImage.img\n\n_Image_ - The `img` element\n\n### LoadingImage.isLoaded\n\n_Boolean_ - `true` when the image has succesfully loaded\n\n### imagesLoaded.images\n\nArray of _LoadingImage_ instances for each image detected\n\n``` js\nvar imgLoad = imagesLoaded('#container');\nimgLoad.on( 'always', function() {\n  console.log( imgLoad.images.length + ' images loaded' );\n  // detect which image is broken\n  for ( var i = 0, len = imgLoad.images.length; i < len; i++ ) {\n    var image = imgLoad.images[i];\n    var result = image.isLoaded ? 'loaded' : 'broken';\n    console.log( 'image is ' + result + ' for ' + image.img.src + );\n  }\n});\n```\n\n## jQuery\n\nIf you include jQuery, imagesLoaded can be used as a jQuery Plugin.\n\n``` js\n$('#container').imagesLoaded( function() {\n  // images have loaded\n});\n```\n\n### jQuery Deferred\n\nThe jQuery plugin returns a [jQuery Deferred object](http://api.jquery.com/category/deferred-object/). This allows you to use `.always()`, `.done()`, `.fail()` and `.progress()`, similarly to the emitted events.\n\n``` js\n$('#container').imagesLoaded()\n  .always( function( instance ) {\n    console.log('all images loaded');\n  })\n  .done( function( instance ) {\n    console.log('all images successfully loaded');\n  })\n  .fail( function() {\n    console.log('all images loaded, at least one is broken');\n  })\n  .progress( function( instance, image ) {\n    var result = image.isLoaded ? 'loaded' : 'broken';\n    console.log( 'image is ' + result + ' for ' + image.img.src + );\n  });\n```\n\n## Contributors\n\nThis project has a [storied legacy](https://github.com/desandro/imagesloaded/graphs/contributors). Its current incarnation was developed by [Tomas Sardyha @Darsain](http://darsa.in/) and [David DeSandro @desandro](http://desandro.com).\n\n## MIT License\n\nimagesLoaded is released under the [MIT License](http://desandro.mit-license.org/). Have at it.\n",
  "readmeFilename": "README.md",
  "_id": "imagesloaded@3.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/desandro/imagesloaded.git"
  }
}