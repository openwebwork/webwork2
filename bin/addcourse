#!/usr/bin/env perl
################################################################################
# WeBWorK Online Homework Delivery System
# Copyright © 2000-2003 The WeBWorK Project, http://openwebwork.sf.net/
# $CVSHeader: webwork-modperl/bin/addcourse,v 1.6 2004/01/04 07:20:33 sh002i Exp $
# 
# This program is free software; you can redistribute it and/or modify it under
# the terms of either: (a) the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any later
# version, or (b) the "Artistic License" which comes with this package.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See either the GNU General Public License or the
# Artistic License for more details.
################################################################################

=head1 NAME

addcourse - add a course

=head1 SYNOPSIS

 addcourse [options] COURSEID

=head1 DESCRIPTION

Add a course to the courses directory. The required directories will be
created. Optionally, a database can be populated with users and the
F<templates> directory can be populated with the contents of another directory.
Also, one or more users can be granted professor privileges.

=head1 OPTIONS

=over

=item B<--templates>=I<DIR>

The contents of the directory I<DIR> will be copied to the F<templates>
directory of the new course.

=item B<--db-layout>=I<LAYOUT>

The specified database layout will be used in place of the default specified in
F<global.conf>. Please note that if you specify a layout other than the default
given in F<global.conf>, you will need to manually create a F<course.conf> file
in the new course's directory containing the following line:

 *dbLayout = $dbLayouts{layoutName};

This is described in greater detail in the F<global.conf> and F<database.conf>
files.

=item B<--global-user>=I<USERID>

Specifies that the user ID of the global user will be I<USERID>, overriding the
value set in F<database.conf>.

=item B<--users>=I<FILE>

The users listed in the comma-separated text file I<FILE> will be added to the
user list of the new course. The format of this file is the same as user lists
exported from WeBWorK.

=item B<--professors>=I<USERID>[,I<USERID>]...

Each I<USERID>, if it is present in the new course's user list, will be granted
professor privileges (i.e. a permission level of 10). Requires B<--users>.

=item I<COURSEID>

The name of the course to create.

=back

=cut

use strict;
use warnings;
use Getopt::Long;

BEGIN {
	die "WEBWORK_ROOT not found in environment.\n"
		unless exists $ENV{WEBWORK_ROOT};
}

use lib "$ENV{WEBWORK_ROOT}/lib";
use WeBWorK::CourseEnvironment;
use WeBWorK::DB;
use WeBWorK::Utils qw(readFile cryptPassword);

sub usage {
	print STDERR "usage: $0 [options] COURSEID\n";
	print STDERR "Options:\n";
	print STDERR "  [--templates=DIR]\n";
	print STDERR "  [--db-layout=LAYOUT]\n";
	print STDERR "  [--global-user=USERID]\n";
	print STDERR "  [--users=FILE [--professors=USERID[,USERID]...] ]\n";
	exit;
}

my $templates = "";
my $dbLayout = "";
my $users = "";
my $globalUserID = "";
my @professors = ();

GetOptions(
	"templates=s" => \$templates,
	"db-layout=s" => \$dbLayout,
	"users=s" => \$users,
	"global-user=s" => \$globalUserID,
	"professors=s" => \@professors,
);
my %professors = map { $_ => 1 } map { split /,/ } @professors;
my $courseID = shift;

unless ($courseID) {
	print STDERR "$0: must specify COURSEID.\n";
	usage();
};

if (@professors and not $users) {
	print STDERR "$0: can't specify --professors without also specifying --users.\n";
	usage();
}

# bring up a minimal course environment
my $ce = WeBWorK::CourseEnvironment->new($ENV{WEBWORK_ROOT}, "FAKE_URL_ROOT",
	"FAKE_PG_ROOT", $courseID);

if ($dbLayout) {
	die "Database layout $dbLayout does not exist in the course environment.",
			" (It must be defined in global.conf.)\n"
		unless exists $ce->{dbLayouts}->{$dbLayout};
}

# collect some data
my $coursesDir = $ce->{webworkDirs}->{courses};
my $courseDir = "$coursesDir/$courseID";

# make sure the course doesn't already exist
if (-e $courseDir) {
	die "$courseID: course exists\n";
}

umask 0002;

# create required directories
my @subDirs = sort values %{ $ce->{courseDirs} };
foreach my $subDir (@subDirs) {
	print "mkdir $subDir\n";
	mkdir "$subDir"
		or die "Failed to create course directory $subDir: $!\n";
}

if ($templates) {
	unless (-d "$courseDir/templates") {
		warn "$courseDir/templates: not found, creating:\n";
		print "mkdir $courseDir/templates\n";
		mkdir "$courseDir/templates"
			or die "Failed to mkdir $courseDir/templates: $!\n";
	}
	print "copy $templates/* -> $courseDir/templates\n";
	system "/bin/cp -r $templates/* $courseDir/templates/"
		and die "Failed to copy $templates/* to $courseDir/templates: $!\n";
}

if ($users) {
	# import users - much of this code is burgled from UserList.pm
	
	my $db;
	if ($dbLayout) {
		# use the specified layout
		$db = WeBWorK::DB->new($ce->{dbLayouts}->{$dbLayout});
	} else {
		# use the default layout
		$db = WeBWorK::DB->new($ce->{dbLayout});
	}
	
	my @contents = split /\n/, readFile($users);
	
	my $globalUserPresent = 0;
	
	foreach my $string (@contents) {
		$string =~ s/^\s+//;
		$string =~ s/\s+$//;
		my (
			$student_id, $last_name, $first_name, $status, $comment,
			$section, $recitation, $email_address, $user_id
		) = split /\s*,\s*/, $string;
		
		my $User = $db->newUser;
		$User->user_id($user_id);
		$User->first_name($first_name);
		$User->last_name($last_name);
		$User->email_address($email_address);
		$User->student_id($student_id);
		$User->status($status);
		$User->section($section);
		$User->recitation($recitation);
		$User->comment($comment);
		
		my $PermissionLevel = $db->newPermissionLevel;
		$PermissionLevel->user_id($user_id);
		if (exists $professors{$user_id}) {
			$PermissionLevel->permission(10);
		} else {
			$PermissionLevel->permission(0);
		}
		
		my $Password = $db->newPassword;
		$Password->user_id($user_id);
		$Password->password(cryptPassword($student_id));
		
		$db->addUser($User);
		$db->addPermissionLevel($PermissionLevel);
		$db->addPassword($Password);
		
		if ($user_id eq $globalUserID) {
			$globalUserPresent = 1;
		}
		
		if (exists $professors{$user_id}) {
			print "add professor $user_id\n";
			delete $professors{$user_id};
		} else {
			print "add user $user_id\n";
		}
	}
	
	if (my @ids = keys %professors) {
		print STDERR "warning: @ids not in imported user list.\n";
	}
	
	unless ($globalUserPresent) {
		warn "warning: global user $globalUserID not in imported user list.\n",
		     "         please add a user with this user ID manually.\n";
	}
}

my $courseEnvFile = $ce->{courseFiles}->{environment};
print "writing $courseEnvFile... ";
open my $fh, ">", $courseEnvFile
	or die "failed to open $courseEnvFile for writing.\n";

print $fh <<EOF;
#!perl
################################################################################
# WeBWorK Online Homework Delivery System
# Copyright © 2000-2003 The WeBWorK Project, http://openwebwork.sf.net/
# 
# This program is free software; you can redistribute it and/or modify it under
# the terms of either: (a) the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any later
# version, or (b) the "Artistic License" which comes with this package.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See either the GNU General Public License or the
# Artistic License for more details.
################################################################################

# This file is used to override the global WeBWorK course environment for
# requests to this course. All package variables set in this file are added to
# the course environment. If you wish to set a variable here but omit it from
# the course environment,  use the "my" keyword. Commonly changed configuration
# options are noted below. The commented-out values are the values which were
# set in the global configuration file at the time this course was created.

EOF

print $fh <<EOF;
# Database layout -- if this course uses a different database layout than the
# one defined in the global configuration file, set it here.
# 
# Example: \$dbLayoutName = "sql";
#          \*dbLayout = \$dbLayouts{sql};
# 
EOF

if ($dbLayout) {
	print $fh "\$dbLayoutName = '$dbLayout';\n";
	print $fh "\*dbLayout = \$dbLayouts{$dbLayout};\n";
} else {
	my $defaultLayoutName = $ce->{dbLayoutName};
	if ($defaultLayoutName) {
		print $fh "#\$dbLayoutName = '$defaultLayoutName';\n";
		print $fh "#\*dbLayout = \$dbLayouts{\$dbLayoutName};\n";
	} else {
		print $fh "#\$dbLayoutName = '#NOT#FOUND#';\n";
		print $fh "#\*dbLayout = \$dbLayouts#NOT#FOUND#;\n";
		warn "default database layout name (\$dbLayoutName) not found in course environment.\n";
	}
}

print $fh <<EOF;

# Global user ID - denotes the ID of the user that the GlobalTableEmulator will
# use to store data for the set and problem tables. only applicable when using
# the GDBM database layout.
# 
# Example: \$dbLayouts{gdbm}->{set}->{params}->{globalUserID} = 'some_user';
#          \$dbLayouts{gdbm}->{{problem}->{params}->{globalUserID} = 'some_user';
# 
EOF

if ($globalUserID) {
	print $fh "\$dbLayouts{gdbm}->{set}->{params}->{globalUserID} = '$globalUserID'\n";
} else {
	my $defaultGlobalUserID = $ce->{dbLayouts}->{gdbm}->{set}->{params}->{globalUserID};
	if (defined $defaultGlobalUserID) {
		print $fh "#\$dbLayouts{gdbm}->{set}->{params}->{globalUserID} = '$defaultGlobalUserID';\n";
	} else {
		print $fh "#\$dbLayouts{gdbm}->{set}->{params}->{globalUserID} = '#NOT#FOUND#';\n";
		warn "default GDBM global user ID not found in course environment.\n";
	}
}

print $fh <<EOF;

# Allowed mail recipients - list of email addresses that the PG system is
# allowed to send mail to. (This prevents subtle PG exploits.) If this is not
# set somewhere, mail from the PG system (i.e. questionaires, essay questions)
# will fail.
# 
# Example: \$mail->{allowedRecipients} = [ 'gage\@math.rochester.edu', 'apizer\@math.rochester.edu' ];
# 
EOF

if (defined $ce->{mail}->{allowedRecipients}) {
	my $value = join ", ", map { "'$_'" } @{ $ce->{mail}->{allowedRecipients} };
	print $fh "#\$mail->{allowedRecipients} = [ $value ];\n";
} else {
	print $fh "#\$mail->{allowedRecipients} = [  ];\n";
}

print $fh <<EOF;

# Feedback recipients - list of email addresses to send feedback to. If not
# defined, mail is sent to all professors and TAs.
# 
# Example: \$mail->{allowedRecipients} = [ 'gage\@math.rochester.edu', 'apizer\@math.rochester.edu', 'feedback-list\@lists.webwork.rochester.edu' ];
# 
EOF

if (defined $ce->{mail}->{feedbackRecipients}) {
	my $value = join ", ", map { "'$_'" } @{ $ce->{mail}->{feedbackRecipients} };
	print $fh "#\$mail->{feedbackRecipients} = [ $value ];\n";
} else {
	print $fh "#\$mail->{allowedRecipients} = [  ];\n";
}

print $fh <<EOF;

# Special PG environment variable: PRINT_FILE_NAMES_FOR -  List the user IDs of
# users who should get PG source file names in their rendered problems. This is
# usually set to the list of professors and TAs in the course.
# 
# Example: \$pg->{specialPGEnvironmentVars}->{PRINT_FILE_NAMES_FOR}  = [ 'gage', 'apizer', 'voloshin' ];
# 
EOF

if (defined $ce->{pg}->{specialPGEnvironmentVars}->{PRINT_FILE_NAMES_FOR}) {
	my $value = join ", ", map { "'$_'" }
		@{ $ce->{pg}->{specialPGEnvironmentVars}->{PRINT_FILE_NAMES_FOR} };
	print $fh "#\$pg->{specialPGEnvironmentVars}->{PRINT_FILE_NAMES_FOR}  = [ $value ];\n";
} else {
	print $fh "#\$pg->{specialPGEnvironmentVars}->{PRINT_FILE_NAMES_FOR}  = [  ];\n";
}

close $fh;
print "done.\n";

=head1 BUGS

Some database drivers are unable to create storage for their data. The GDBM
backend can do this, but the SQL backend cannot (currently). If you wish to
create a course using the SQL database layout, you must create a

=head1 AUTHOR

Written by Sam Hathaway, hathaway at users.sourceforge.net.

=cut
