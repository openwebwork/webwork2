#!/usr/bin/env perl
################################################################################
# WeBWorK Online Homework Delivery System
# Copyright © 2000-2003 The WeBWorK Project, http://openwebwork.sf.net/
# $CVSHeader: webwork2/bin/addcourse,v 1.14 2004/09/23 16:53:25 sh002i Exp $
# 
# This program is free software; you can redistribute it and/or modify it under
# the terms of either: (a) the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any later
# version, or (b) the "Artistic License" which comes with this package.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See either the GNU General Public License or the
# Artistic License for more details.
################################################################################

=head1 NAME

addcourse - add a course

=head1 SYNOPSIS

 addcourse [options] COURSEID

=head1 DESCRIPTION

Add a course to the courses directory. The required directories will be created.
Optionally, a database can be populated with users. Also, one or more users can
be granted professor privileges.

=head1 OPTIONS

=over

=item B<--db-layout>=I<LAYOUT>

The specified database layout will be used in place of the default specified in
F<global.conf>.

If B<--db-layout> is set to C<gdbm>, the following options are valid:

=over

=item B<--global-user>=I<USERID>

Specifies that the user ID of the global user will be I<USERID>, overriding the
value set in F<database.conf>. Applicable only to courses using the C<gdbm>
database layout.

=back

If B<--db-layout> is set to C<sql>, the following options are valid:

=over

=item B<--sql-host>=I<HOST>

Specifies the hostname of the SQL server on which to create the course database.
If not specified, the default for your RDBMS will be used.

=item B<--sql-port>=I<PORT>

Specifies the port of the SQL server on which to create the course database. If
not specified, the default for your RDBMS will be used.

=item B<--sql-user>=I<USER>

Specifies the username to use when connecting to the SQL server to create the
course database. This user must have CREATE, DELETE, FILE, INSERT, SELECT, and
UPDATE privileges, WITH GRANT OPTION.

=item B<--sql-pass>=I<PASS>

Specifies the password to use when connecting to the SQL server.

=item B<--sql-db>=I<DBNAME>

Specifies the name of the database to create. (This is usually
"webwork_COURSENAME", but can be overridden by changing the database layout in
F<global.conf>.)

=item B<--sql-wwhost>=I<WWHOST>

Specifies the host from which the webwork database users will be allowed to
connect. (if B<--sql-host> is set to localhost, this should be set to localhost
too.)

=back

=item B<--users>=I<FILE>

The users listed in the comma-separated text file I<FILE> will be added to the
user list of the new course. The format of this file is the same as user lists
exported from WeBWorK.

=item B<--professors>=I<USERID>[,I<USERID>]...

Each I<USERID>, if it is present in the new course's user list, will be granted
professor privileges (i.e. a permission level of 10). Requires B<--users>.

=item B<--templates-from>=I<COURSEID>

If specified, the contents of the specified course's templates directory are
used to populate the new course's templates directory.

=item I<COURSEID>

The name of the course to create.

=back

=cut

BEGIN {
	# hide arguments (there could be passwords there!)
	$0 = "$0";
}

use strict;
use warnings;
use Getopt::Long;

BEGIN {
	die "WEBWORK_ROOT not found in environment.\n"
		unless exists $ENV{WEBWORK_ROOT};
}

use lib "$ENV{WEBWORK_ROOT}/lib";
use WeBWorK::CourseEnvironment;
use WeBWorK::DB;
use WeBWorK::File::Classlist;
use WeBWorK::Utils qw(runtime_use readFile cryptPassword);
use WeBWorK::Utils::CourseManagement qw(addCourse deleteCourse listCourses);

sub usage {
	print STDERR "usage: $0 [options] COURSEID\n";
	print STDERR "Options:\n";
	print STDERR "  [--db-layout=LAYOUT]\n";
	print STDERR "  for \"sql\" database layout:\n";
	print STDERR "    [--sql-host=HOST] [--sql-port=port]\n";
	print STDERR "    --sql-user=USER --sql-pass=PASS\n";
	print STDERR "    --sql-db=DBNAME --sql-wwhost=WWHOST\n";
	print STDERR "  for \"gdbm\" database layout:\n";
	print STDERR "    [--global-user=USERID]\n";
	print STDERR "  [--users=FILE [--professors=USERID[,USERID]...] ]\n";
	exit;
}

sub usage_error {
	print STDERR "$0: @_\n";
	usage();
}

my $dbLayout = "";
my $sql_host = "";
my $sql_port = "";
my $sql_user = "";
my $sql_pass = "";
my $sql_db = "";
my $sql_wwhost = "";
my $globalUserID = "";
my $users = "";
my @professors = ();
my $templates_from = "";

##### get command-line options #####

GetOptions(
	"db-layout=s" => \$dbLayout,
	"sql-host=s" => \$sql_host,
	"sql-port=s" => \$sql_port,
	"sql-user=s" => \$sql_user,
	"sql-pass=s" => \$sql_pass,
	"sql-db=s" => \$sql_db,
	"sql-wwhost=s" => \$sql_wwhost,
	"global-user=s" => \$globalUserID,
	"users=s" => \$users,
	"professors=s" => \@professors,
	"templates-from=s" => \$templates_from,
);
my %professors = map { $_ => 1 } map { split /,/ } @professors;
my $courseID = shift;

##### perform sanity checks #####

usage_error("must specify COURSEID.") unless $courseID;

# bring up a minimal course environment
my $ce = WeBWorK::CourseEnvironment->new({
	webwork_dir => $ENV{WEBWORK_ROOT},
	courseName => $courseID
});

if ($dbLayout) {
	die "Database layout $dbLayout does not exist in the course environment.",
			" (It must be defined in global.conf.)\n"
		unless exists $ce->{dbLayouts}->{$dbLayout};
} else {
	# use default value
	$dbLayout = $ce->{dbLayoutName};
}

if ($dbLayout eq "sql") {
	usage_error("must specify --sql-user.")   unless $sql_user;
	usage_error("must specify --sql-pass.")   unless $sql_pass;
	usage_error("must specify --sql-db.")     unless $sql_db;
	usage_error("must specify --sql-wwhost.") unless $sql_wwhost;
} elsif ($dbLayout eq "gdbm") {
	# no required params, apparently...
}

usage_error("can't specify --professors without also specifying --users.")
	if @professors and not $users;

##### set up parameters to pass to addCourse() #####

my %courseOptions = ( dbLayoutName => $dbLayout );
if ($dbLayout eq "gdbm") {
	$courseOptions{globalUserID} = $globalUserID if $globalUserID ne "";
}

my %dbOptions;
if ($dbLayout eq "sql") {
	$dbOptions{host}     = $sql_host if $sql_host ne "";
	$dbOptions{port}     = $sql_port if $sql_port ne "";
	$dbOptions{username} = $sql_user;
	$dbOptions{password} = $sql_pass;
	$dbOptions{database} = $sql_db;
	$dbOptions{wwhost}   = $sql_wwhost;
}

my @users;
if ($users) {
	# this is a hack to create records without bringing up a DB object
	#my $db = WeBWorK::DB->new($ce->{dbLayouts}->{$dbLayout});
	my $userClass = $ce->{dbLayouts}->{$dbLayout}->{user}->{record};
	my $passwordClass = $ce->{dbLayouts}->{$dbLayout}->{password}->{record};
	my $permissionClass = $ce->{dbLayouts}->{$dbLayout}->{permission}->{record};
	
	runtime_use($userClass);
	runtime_use($passwordClass);
	runtime_use($permissionClass);
	
	my @classlist = parse_classlist($users);
	foreach my $record (@classlist) {
		my %record = %$record;
		my $user_id = $record{user_id};
		
		my $User = new $userClass(%record);
		my $PermissionLevel = new $permissionClass(user_id => $user_id, permission => 0);
		my $Password = new $passwordClass(user_id => $user_id, password => cryptPassword($record{student_id}));
		
		if (exists $professors{$user_id}) {
			$PermissionLevel->permission(10);
			delete $professors{$user_id};
		}
		
		push @users, [ $User, $Password, $PermissionLevel ];
	}
	
	if (my @ids = keys %professors) {
		print STDERR "warning: @ids not in imported user list.\n";
	}
}

my %optional_arguments;
if ($templates_from ne "") {
	$optional_arguments{templatesFrom} = $templates_from;
}

##### call addCourse(), handle errors #####

eval {
	addCourse(
		courseID      => $courseID,
		ce            => $ce,
		courseOptions => \%courseOptions,
		dbOptions     => \%dbOptions,
		users         => \@users,
		%optional_arguments,
	);
};

if ($@) {
	my $error = $@;
	print STDERR "$error\n";
	exit;
}

=head1 AUTHOR

Written by Sam Hathaway, hathaway at users.sourceforge.net.

=cut
