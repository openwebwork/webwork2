#!/usr/bin/env perl

# This is the script build-library-directory-tree

# This is used to create the file library-directory-tree.json which can be used to load in 
# directory information for the OPL.  It writes the file as a JSON of directories to be easily loaded. 

use strict;
use warnings;
use File::Find::Rule;
use File::Basename;
use Cwd;
use DBI;
use JSON;

BEGIN {
        die "WEBWORK_ROOT not found in environment.\n"
                unless exists $ENV{WEBWORK_ROOT};
	# Unused variable, but define it to avoid an error message.
	$WeBWorK::Constants::WEBWORK_DIRECTORY = '';
}

# Get database connection

use lib "$ENV{WEBWORK_ROOT}/lib";
use WeBWorK::CourseEnvironment;

my $ce = new WeBWorK::CourseEnvironment({webwork_dir=>$ENV{WEBWORK_ROOT}});
my $libraryRoot = $ce->{problemLibrary}->{root};
$libraryRoot =~ s|/+$||;

print $libraryRoot . "\n";

my $libraryVersion = $ce->{problemLibrary}->{version};

my($filename, $directories) = fileparse($libraryRoot);

my @dirArray = ();
push(@dirArray,buildTree($libraryRoot));


#$dbh->disconnect;

my $webwork_htdocs = $ce->{webwork_dir}."/htdocs";
my $file = "$webwork_htdocs/DATA/library-directory-tree.json";

# use a variable for the file handle
my $OUTFILE;

# use the three arguments version of open
# and check for errors
open $OUTFILE, '>', $file  or die "Cannot open $file";

# you can check for errors (e.g., if after opening the disk gets full)
print { $OUTFILE } to_json(\@dirArray) or die "Cannot write to $file";

# check for errors
close $OUTFILE or die "Cannot close $file";


print "Wrote Library Tree to $file\n";

sub buildTree {
	my $absoluteDir = shift;
	my $branch = {};
	my ($name,$dir) = fileparse($absoluteDir);
	$branch->{name} = $name;
	my @dirs = File::Find::Rule->maxdepth(1)->relative(1)->directory->in($absoluteDir);
	if (scalar(@dirs)==0){
		return undef;
	}

	my @branches = ();

	for my $dir (@dirs){
		my $theBranch = buildTree($absoluteDir . "/" . $dir);
		if ($theBranch) {
			push(@branches,$theBranch)
		} else {
			$b = {};
			$b->{name} = $dir;
			push(@branches,$b);
		}
	}

	$branch->{subfields} = \@branches;

	return $branch;
}