#!/usr/bin/env perl
################################################################################
# WeBWorK Online Homework Delivery System
# Copyright © 2000-2003 The WeBWorK Project, http://openwebwork.sf.net/
# $CVSHeader: webwork-modperl/bin/wwdb,v 1.7 2004/04/25 16:27:15 sh002i Exp $
# 
# This program is free software; you can redistribute it and/or modify it under
# the terms of either: (a) the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any later
# version, or (b) the "Artistic License" which comes with this package.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See either the GNU General Public License or the
# Artistic License for more details.
################################################################################

=head1 NAME

wwdb - command-line interface to the WeBWorK databases (WWDBv2).

=head1 NOTE

This utility is deprecated. All database functionality can be accessed using the
F<wwsh> utility.

=cut

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";
use WeBWorK::ContentGenerator; # for cook_args
use WeBWorK::CourseEnvironment;
use WeBWorK::DB;
use WeBWorK::Utils::DBImportExport qw/dbExport dbImport/;

sub main(@) {
	my ($course, $command, $file, @arguments) = @_;
	
	unless ($course and $command and $file) {
		die "usage: $0 course { import | export } file [table ...]\n";
	}
	
	my $ce = WeBWorK::CourseEnvironment->new($ENV{WEBWORK_ROOT}, "", "", $course);
	my $db = WeBWorK::DB->new($ce->{dbLayout});
	
	my @errors;
	
	if ($command eq "export") {
		open my $fh, ">", $file or die "failed to open file '$file' for writing: $!\n";
		@errors = dbExport(
			db => $db,
			xml => $fh,
			tables => \@arguments,
		);
		close $fh;
	} elsif ($command eq "import") {
		open my $fh, "<", $file or die "failed to open file '$file' for writing: $!\n";
		@errors = dbImport(
			db => $db,
			xml => $fh,
			tables => \@arguments,
			# conflict => "skip", # the default
		);
		close $fh;
	} else {
		die "$command: unrecognized command.\n";
	}
	
	if (@errors) {
		warn "The following errors occured:\n", map { "* $_\n" } @errors;
		exit 1;
	}
}

main(@ARGV);
