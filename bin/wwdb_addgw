#!/usr/bin/perl -w
################################################################################
# WeBWorK Online Homework Delivery System
# Copyright © 2000-2007 The WeBWorK Project, http://openwebwork.sf.net/
# $CVSHeader: webwork2/bin/wwdb_addgw,v 1.3 2006/01/25 23:13:45 sh002i Exp $
# 
# This program is free software; you can redistribute it and/or modify it under
# the terms of either: (a) the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any later
# version, or (b) the "Artistic License" which comes with this package.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See either the GNU General Public License or the
# Artistic License for more details.
################################################################################
# 
# wwdb_addgw
#   update webwork database tables to add fields for the gateway module
#
# by Gavin LaRose <glarose@umich.edu>
#
=head1 NAME

wwdb_addgw - convert SQL databases for WeBWorK 2 to add gateway fields.

=head1 SYNOPSIS

 wwdb_addgw [-h] [sql|sql_single]

=head1 DESCRIPTION

Adds fields to the set and set_user tables in the WeBWorK mysql databases 
that are required for the gateway module.  The script prompts for which 
courses to modify.  Adding gateway database fields to existing courses 
should have no effect on those courses, even if they are running under a
non-gateway aware version of the WeBWorK system.

If C<-h> is provided, the script hides the mysql admin password.

C<sql> or C<sql_single> gives the default WeBWorK database format.  If 
omitted, the script assumes sql_single and prompts to be sure.

=cut

use strict;
use DBI;

# this is necessary on some systems
system("stty erase ");

my $source = 'DBI:mysql';

# fields to add to the set and set_user tables
my %addFields = ( 'assignment_type' => 'text',
		  'attempts_per_version' => 'integer',
		  'time_interval' => 'integer',
		  'versions_per_interval' => 'integer',
		  'version_time_limit' => 'integer',
		  'version_creation_time' => 'bigint',
		  'problem_randorder' => 'integer',
		  'version_last_attempt_time' => 'bigint', );

# process input data
my $hidepw = 0;
my $dbtype = 'sql_single';
while ( $_ = shift(@ARGV) ) {
    if ( /^-h$/ ) {
	$hidepw = 1;
    } elsif ( /^-/ ) {
	die("Unknown input flag $_.\nUsage: wwdb_addgw [-h] sql|sql_single\n");
    } else {
	if ( $_ eq 'sql' || $_ eq 'sql_single' ) {
	    $dbtype = $_;
	} else {
	    die("Unknown argument $_.\nUsage: wwdb_addgw [-h] " .
		"sql|sql_single\n");
	}
    }
}

printHdr( $dbtype );

# get database information
my ( $admin, $adminpw );
( $admin, $adminpw, $dbtype ) = getDBInfo( $hidepw, $dbtype );

# connect to database, if we're in sql_single mode; this lets us easily
# get a list of courses to work with.  in sql mode, it's harder b/c I can't
# get DBI->data_sources('mysql') to work on my system, so we prompt for 
# those separately.  if we're in sql single mode, $dbh is a place holder,
# because we have to do the database connects in the subroutines to connect
# to each different database
my $dbh = '';
if ( $dbtype eq 'sql_single' ) {
    $dbh = DBI->connect("$source:webwork", $admin, $adminpw) or
	die( $DBI::errstr );
}

# get courses list
my @courses = getCourses( $dbtype, $dbh );

# now $course{coursename} = format (sql or sql_single)

# do update
my ( $doneRef, $skipRef ) = updateCourses( $dbtype, $dbh, \@courses, 
					   $admin, $adminpw );
$dbh->disconnect() if ( $dbh );

# all done
confirmUpdate( $dbtype, $doneRef, $skipRef );

# end of main
#-------------------------------------------------------------------------------
# subroutines

sub printHdr { 
    print <<eoh;
---------------------------------------------------------------------------
wwdb_addgw: update WeBWorK SQL databases to include fields required for a 
            Gateway aware WeBWorK installation.

set default WeBWorK database type to $dbtype.
---------------------------------------------------------------------------
eoh
    return 1;
}

sub getDBInfo {
    my $hide = shift();
    my $type = shift();

    print "mySQL administrator login name [root] > ";
    my $admin = <STDIN>;
    chomp( $admin );
    $admin = 'root' if ( ! $admin );

    print "mySQL login password for $admin > ";
    system("stty -echo") if ( $hide );
    my $passwd = <STDIN>;
    if ( $hide ) { system("stty echo"); print "\n"; }
    chomp( $passwd );
    die("Error: no password provided\n") if ( ! $passwd );

    print "WeBWorK database type (sql or sql_single) [$type] > ";
    my $dbtype = <STDIN>;
    chomp( $dbtype );
    $dbtype = $type if ( ! $dbtype );

    return( $admin, $passwd, $dbtype );
}

sub getCourses {
    my ( $dbtype, $dbh ) = @_;

    my %courses = ();

# get a course list
    if ( $dbtype eq 'sql' ) {
	print "courses to update (enter comma separated) > ";
	my $crslist = <STDIN>;
	chomp($crslist);
	my @crslist = split(/,\s*/, $crslist);
	die("Error: no courses specified\n") if ( ! @crslist );
	foreach ( @crslist ) { $courses{$_} = 1; }

    } else {
	my $cmd = 'show tables';
	my $st = $dbh->prepare( $cmd ) or die( $dbh->errstr() );
	$st->execute() or die( $st->errstr() );
	my $rowRef = $st->fetchall_arrayref();
	foreach my $r ( @$rowRef ) {
	    $_ = $r->[0];
	    #my ($crs, $tbl) = ( /^([^_]+)_(.*)$/ );  # this fails on courses with underscores in their names
	    my  ($crs) = (/^(.*)_key$/);  # match the key table
	    $courses{$crs} = 1 if ( defined( $crs ) );
	}
	die("Error: found now sql_single WeBWorK courses\n") if ( ! %courses );
    }

# confirm this is correct
    print "\nList of courses to update:\n";
    my %nummap = orderedList( %courses );
    printclist( sort keys( %courses ) );
    print "Enter # to edit name, d# to delete from update list, or [cr] to " .
	"continue.\n > ";
    my $resp = <STDIN>;
    chomp($resp);
    while ( $resp ) {
	if ( $resp =~ /^\d+$/ ) {
	    print "  old course name $nummap{$resp}; new > ";
	    delete( $courses{$nummap{$resp}} );
	    my $newname = <STDIN>;
	    chomp($newname);
	    $courses{ $newname } = 1;
	} elsif ( $resp =~ /^d(\d+)$/ ) {
	    $resp = $1;
	    delete( $courses{$nummap{$resp}} );
	} else {
	    print "unrecognized response: $resp.\n";
	}
	%nummap = orderedList( %courses );
	print "Current list of courses to update:\n";
	printclist( sort keys( %courses ) );
	print "Enter #, d# or [cr] > ";  
        chomp( $resp = <STDIN> );
    }

    my @courses = sort( keys %courses );
    if ( @courses ) {
	return @courses;
    } else {
	die("Error: no courses left to update.\n");
    }
}

sub orderedList {
    my %hash = @_;
    my $i=1;
    my %nummap = ();
    foreach ( sort( keys( %hash ) ) ) {
	$nummap{ $i } = $_;
	$i++;
    }
    return %nummap;
}

sub printclist {
    my @list = @_;

# assumes a 75 column screen

    my $i = 1;
    if ( @list <= 3 ) {
	foreach ( @list ) { print "  $i. $_\n"; $i++ }
    } else {
	while ( @list >= $i ) {
	    printf("  %2d. %-19s", $i, $list[$i-1]);
	    printf("  %2d. %-19s", ($i+1), $list[$i]) if ( @list >= ($i+1) );
	    printf("  %2d. %-19s", ($i+2), $list[$i+1]) if ( @list >= ($i+2) );
	    print "\n";
	    $i+=3;
	}
    }
    return 1;
}

sub updateCourses {
    my ( $dbtype, $dbh, $crsRef, $admin, $adminpw ) = @_;

    my @done = ();
    my @skipped = ();

# give some sense of progress
    select STDOUT; $| = 1;    # unbuffer output
    print "doing update for $dbtype databases.\n";

# list of added fields to check for classes that don't need updating
    my @newFields = keys( %addFields );

    foreach my $crs ( @$crsRef ) {
	print "updating $crs.\n";
	my $colRef;

	if ( $dbtype eq 'sql' ) {
    # we need to get a database handle first
	    $dbh = DBI->connect("$source:webwork_$crs", $admin, $adminpw) or
		die( $DBI::errstr );

    # now get a list of columns from the set table to check to see if 
    # we need an update
	    my $cmd = "show columns from set_not_a_keyword";
	    my $st = $dbh->prepare( $cmd ) or die( $dbh->errstr() );
	    $st->execute();
	    $colRef = $st->fetchall_arrayref();

	} else {
    # for sql_single we already have a database handle; get the set table
    # columns and proceed
	    my $cmd = "show columns from `${crs}_set`";
	    print "$cmd\n";
	    my $st = $dbh->prepare( $cmd ) or die( $dbh->errstr() );
	    $st->execute();
	    $colRef = $st->fetchall_arrayref();
	}

    # now, do we have the columns we need already?
	my $doneAlready = 0;
	foreach my $cols ( @$colRef ) {
	    if ( inList( $cols->[0], @newFields  ) ) {
		$doneAlready = 1;
		last;
	    }
	}
	if ( $doneAlready ) {
	    push( @skipped, $crs );
	    next;
	} else {

    # do update for course
	    my ( $cmd1, $cmd2 );
	    if ( $dbtype eq 'sql' ) {
		$cmd1 = 'alter table set_not_a_keyword add column';
		$cmd2 = 'alter table set_user add column';
	    } else {
		$cmd1 = "alter table `${crs}_set` add column";
		$cmd2 = "alter table `${crs}_set_user` add column";
	    }

	    foreach my $f ( keys %addFields ) {
	    print "$cmd1 $f $addFields{$f}\n";
		my $st = $dbh->prepare( "$cmd1 $f $addFields{$f}" ) or 
                    die( $dbh->errstr() );
		$st->execute() or die( $st->errstr() );
	    }

	    foreach my $f ( keys %addFields ) {
	    print "$cmd2 $f $addFields{$f}\n";
		my $st = $dbh->prepare( "$cmd2 $f $addFields{$f}" ) or 
		    die( $dbh->errstr() );
		$st->execute() or die( $st->errstr() );
	    }

	    push( @done, $crs );
	}
    # if we're doing sql databases, disconnect from this courses' database
	$dbh->disconnect() if ( $dbtype eq 'sql' );

    }  # end loop through courses
    print "\n";

    return( \@done, \@skipped );
}

sub inList {
    my $v = shift();
    foreach ( @_ ) { return 1 if ( $v eq $_ ); }
    return 0;
}

sub confirmUpdate {
    my ( $dbtype, $doneRef, $skipRef ) = @_;

    my $s1 = "updated $dbtype courses: ";
    my $s2 = "courses not needing updates were skipped: ";
    my $l1 = length($s1);
    my $l2 = length($s2);

    my $crsList= (@$doneRef) ? join(', ', @$doneRef) : '';
    my $skpList= (@$skipRef) ? join(', ', @$skipRef) : '';
    my $crsString = ( $crsList ) ? 
	$s1 . hangIndent( $l1, 75, $l1, "$crsList.") . "\n" : '';
    my $skpString = ( $skpList ) ? 
	$s2 . hangIndent( $l1, 75, $l2, "$skpList." ) : '';

    print <<eot;
---------------------------------------------------------------------------
done.
$crsString$skpString

eot
}

sub hangIndent {
    my ( $hang, $width, $shorten, $text ) = @_;
# pre:  $hang and $width are numbers, $hang < $width; $text is a string
#       if $shorten, the first line is shortened by $shorten
# post: $text is reformatted to have maximum width $width and a hanging
#       indent of $hang each line after the first; the reformatted text
#       is returned
    my $htext = '';
    my $line = '';
    my $indent = ($shorten ? $shorten : 0);
    my $ldr = ' 'x$hang;

    if ( $indent + length($text) < $width ) {
        $htext = $text;
    } else {
        foreach ( split(/\s+/, $text ) ) {
            if ( $indent + length($line) + length($_) >= $width ) {
                $htext .= $line . "\n$ldr";
                $line = "$_ ";
                $indent = $hang;
            } else {
                $line .= "$_ ";
            }
        }
        $htext .= $line if ( $line );
    }
    $htext =~ s/\n$ldr$//;
    return $htext;
}

# end of script
#-------------------------------------------------------------------------------
