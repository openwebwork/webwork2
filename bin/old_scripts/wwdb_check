#!/usr/bin/env perl
################################################################################
# WeBWorK Online Homework Delivery System
# Copyright © 2000-2007 The WeBWorK Project, http://openwebwork.sf.net/
# $CVSHeader: webwork2/bin/wwdb_check,v 1.7 2006/08/14 17:23:56 sh002i Exp $
# 
# This program is free software; you can redistribute it and/or modify it under
# the terms of either: (a) the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any later
# version, or (b) the "Artistic License" which comes with this package.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See either the GNU General Public License or the
# Artistic License for more details.
################################################################################

=head1 NAME

wwdb_check - check the schema of an existing WeBWorK database

=head1 SYNOPSIS

 wwdb_check [-nv] [ COURSE ... ]

=head1 DESCRIPTION

Scans an existing WeBWorK database to verify that its structure is correct for
version 0 of the database structure. Version 0 refers to the last version before
automatic database upgrading was added to WeBWorK. This utility should be run
once after upgrading webwork from version 2.2.x to version 2.3.0.

Once any inconsistencies are fixed using this utility, F<wwdb_upgrade> should be
run to affect automatic database upgrades to the database version appropriate
for the current version of WeBWorK.

If no courses are listed on the command line, all courses are checked. Checks
for the following:

=over

=item *

Make sure that the appropriate tables exist for each course.

=item *

Make sure that the proper columns exist in each table.

=item *

Verify that the proper column type is in use for each column.

=back

=head1 OPTIONS

=over

=item -n

Don't offer to fix problems, just report them.

=item -v

Verbose output.

=back

=cut

use strict;
use warnings;
use Getopt::Std;
use DBI;
use Data::Dumper;

BEGIN {
	die "WEBWORK_ROOT not found in environment.\n"
		unless exists $ENV{WEBWORK_ROOT};
}

use lib "$ENV{WEBWORK_ROOT}/lib";
use WeBWorK::CourseEnvironment;
use WeBWorK::Utils qw/runtime_use/;
use WeBWorK::Utils::CourseManagement qw/listCourses/;

our ($opt_n, $opt_v);
getopts("nv");

my $noop = sub {};

if ($opt_n) {
	*maybe_add_table = $noop;
	*maybe_add_field = $noop;
	*maybe_change_field = $noop;
} else {
	*maybe_add_table = \&ask_add_table;
	*maybe_add_field = \&ask_add_field;
	*maybe_change_field = \&ask_change_field;
}

if ($opt_v) {
	$| = 1;
	*verbose = sub { print STDERR @_ };
} else {
	*verbose = $noop;
}

use constant DB_VERSION => 0;

# a random coursename we can grab back out later
#my @chars = ('A'..'Z','a'..'z','0'..'9');
#my $random_courseID = join("", map { $chars[rand(@chars)] } 1..16);
# fixed courseID for "version zero table data"
my $random_courseID = "6SC36NukknC3IT3M";

my $ce = WeBWorK::CourseEnvironment->new({
	webwork_dir => $ENV{WEBWORK_ROOT},
	courseName => $random_courseID,
});

my $dbh = DBI->connect(
	$ce->{database_dsn},
	$ce->{database_username},
	$ce->{database_password},
	{
		PrintError => 0,
		RaiseError => 1,
	},
);

=for comment

 %ww_table_data = (
	 $table => {
		 sql_name => "SQL name for this field, probably contains $random_courseID",
		 field_order => [ ... ],
		 keyfield_order => [ ... ],
		 fields => {
			 $field => {
				 sql_name => "SQL name for this field, possibly overridden",
				 sql_type => "type for this field, from SQL_TYPES in record class",
				 is_keyfield => "boolean, whether or not this field is a keyfield",
			 },
			 ...
		 },
	 },
	 ...
 );

=cut

# get table data for the current version of webwork
#my %ww_table_data = get_ww_table_data();
#$Data::Dumper::Indent = 1;
#print Dumper(\%ww_table_data);
#exit;
# get static table data for version zero of the database
my %ww_table_data = get_version_zero_ww_table_data();

my %sql_tables = get_sql_tables();

if (exists $sql_tables{dbupgrade}) {
	print "A 'dbupgrade' table exists in this database. This suggests that this database may already be upgraded beyond db_version 0. If this is the case, running this utility is not necessary. This utility is only needed to make sure that databases are set up correctly to enter into the automatic upgrade regimen.\n";
	exit unless ask_permission("Go ahead with table checks?", 0);
	delete $sql_tables{dbupgrade};
}

my @ww_courses = @ARGV;
@ww_courses = listCourses($ce) if not @ww_courses;

foreach my $ww_course_name (@ww_courses) {
	my $ce2 = WeBWorK::CourseEnvironment->new({
		webwork_dir => $ENV{WEBWORK_ROOT},
		courseName => $ww_course_name,
	});
	
	my @diffs = compare_dbLayouts($ce, $ce2);
	if (@diffs) {
		print "\nThe database layout for course '$ww_course_name' differs from the generic database layout in global.conf. Here's how:\n\n";
		print map("* $_\n", @diffs), "\n";
		next unless ask_permission("Check course '$ww_course_name'?", 0);
	}
	
	print "\nChecking tables for course '$ww_course_name'\n";
	
	foreach my $ww_table_name (keys %ww_table_data) {
		if ($ce2->{dbLayout}{$ww_table_name}{params}{non_native}) {
			verbose("skipping table $ww_table_name for course $ww_course_name -- not a native table.\n");
		} else {
			check_table($ww_course_name, $ww_table_name);
		}
	}
}

my $qualifier = @ARGV ? " selected" : "";
print "\nDone checking course tables.\n";
print "The following tables exist in the database but are not associated with any$qualifier course:\n\n";
print join("\n", sort keys %sql_tables), "\n\n";

exit;

################################################################################

sub get_ww_table_data {
	my %result;
	
	foreach my $table (keys %{$ce->{dbLayout}}) {
		my $record_class = $ce->{dbLayout}{$table}{record};
		runtime_use $record_class;
		
		my @fields = $record_class->FIELDS;
		my @types = $record_class->SQL_TYPES;
		my @keyfields = $record_class->KEYFIELDS;
		my %keyfields; @keyfields{@keyfields} = ();
		
		my %field_data;
		
		foreach my $i (0..$#fields) {
			my $field = $fields[$i];
			my $field_sql = $ce->{dbLayout}{$table}{params}{fieldOverride}{$field};
			$field_data{$field}{sql_name} = $field_sql || $field;
			
			my $type = $types[$i];
			$field_data{$field}{sql_type} = $type;
			
			$field_data{$field}{is_keyfield} = exists $keyfields{$field};
		}
		
		$result{$table}{fields} = \%field_data;
		$result{$table}{field_order} = \@fields;
		$result{$table}{keyfield_order} = \@keyfields;
		
		my $table_sql = $ce->{dbLayout}{$table}{params}{tableOverride};
		$result{$table}{sql_name} = $table_sql || $table;
	}
	
	return %result;
}

sub get_sql_tables {
	my $sql_tables_ref = $dbh->selectcol_arrayref("SHOW TABLES");
	my %sql_tables; @sql_tables{@$sql_tables_ref} = ();
	
	return %sql_tables;
}

################################################################################

sub check_table {
	my ($ww_course_name, $ww_table_name) = @_;
	my $sql_table_name = get_sql_table_name($ww_table_data{$ww_table_name}{sql_name}, $ww_course_name);
	
	verbose("\nChecking '$ww_table_name' table (SQL table '$sql_table_name')\n");
	
	if (exists $sql_tables{$sql_table_name}) {
		check_fields($ww_course_name, $ww_table_name, $sql_table_name);
		delete $sql_tables{$sql_table_name};
	} else {
		print "$sql_table_name: table missing\n";
		my $ww_table_rec = $ww_table_data{$ww_table_name};
		if (maybe_add_table($ww_course_name, $ww_table_name)) {
			check_fields($ww_course_name, $ww_table_name, $sql_table_name);
			delete $sql_tables{$sql_table_name};
		}
	}
}

sub ask_add_table {
	my ($ww_course_name, $ww_table_name) = @_;
	my $ww_table_rec = $ww_table_data{$ww_table_name};
	my $sql_table_name = get_sql_table_name($ww_table_rec->{sql_name}, $ww_course_name);
	
	my $stmt = create_table_stmt($ww_table_rec, $sql_table_name);
	
	print "\nI can add this table to the database with the following SQL statement:\n";
	print "$stmt\n\n";
	print "If this is an upgraded installation, it is possible that '$ww_course_name' is an old GDBM course. If this is the case, you should probably not add this table, as it won't be used.\n";
	return 0 unless ask_permission("Add table '$sql_table_name'?");
	
	return unless do_handle_error($dbh, $stmt);
	print "Added table '$sql_table_name'.\n\n";
	
	return 1;
}

sub create_table_stmt {
	my ($ww_table_rec, $sql_table_name) = @_;
	
	#print Dumper($ww_table_rec);
	
	my @field_list;
	
	# generate a column specification for each field
	my @fields = @{$ww_table_rec->{field_order}};
	foreach my $field (@fields) {
		my $ww_field_rec = $ww_table_rec->{fields}{$field};
		my $sql_field_name = $ww_field_rec->{sql_name};
		my $sql_field_type = $ww_field_rec->{sql_type};
		
		push @field_list, "`$sql_field_name` $sql_field_type";
	}
	
	# generate an INDEX specification for each all possible sets of keyfields (i.e. 0+1+2, 1+2, 2)
	my @keyfields = @{$ww_table_rec->{keyfield_order}};
	foreach my $start (0 .. $#keyfields) {
		my @index_components;
		
		foreach my $component (@keyfields[$start .. $#keyfields]) {
			my $ww_field_rec = $ww_table_rec->{fields}{$component};
			my $sql_field_name = $ww_field_rec->{sql_name};
			my $sql_field_type = $ww_field_rec->{sql_type};
			my $length_specifier = ($sql_field_type =~ /int/i) ? "" : "(16)";
			push @index_components, "`$sql_field_name`$length_specifier";
		}
		
		my $index_string = join(", ", @index_components);
		push @field_list, "INDEX ( $index_string )";
	}
	
	my $field_string = join(", ", @field_list);
	my $create_stmt = "CREATE TABLE `$sql_table_name` ( $field_string )";
	
	return $create_stmt;
}

################################################################################

sub check_fields {
	my ($ww_course_name, $ww_table_name, $sql_table_name) = @_;
	
	my $describe_data = $dbh->selectall_hashref("DESCRIBE `$sql_table_name`", 1);
	
	foreach my $ww_field_name (@{$ww_table_data{$ww_table_name}{field_order}}) {
		my $ww_field_rec = $ww_table_data{$ww_table_name}{fields}{$ww_field_name};
		my $sql_field_name = $ww_field_rec->{sql_name};
		my $sql_field_rec = $describe_data->{$sql_field_name};
		
		verbose("Checking '$ww_field_name' field (SQL field '$sql_table_name.$sql_field_name')\n");
		
		#print "$sql_table_name.$sql_field_name:\n";
		#print Dumper($ww_field_rec);
		#print Dumper($sql_field_rec);
		
		if (defined $sql_field_rec) {
			my ($sql_base_type) = $sql_field_rec->{Type} =~ /^([^(]*)/;
			#print $sql_field_rec->{Type}, " => $sql_base_type\n";
			
			my $needs_fixing = 0;
			if ($ww_field_name eq "psvn") {
				
				unless ("int" eq lc($sql_base_type)) {
					$needs_fixing = 1;
					print "$sql_table_name.$sql_field_name: type should be 'int' but appears to be '",
						 lc($sql_base_type), "'\n";
				}
				
				unless (lc($sql_field_rec->{Extra}) =~ /\bauto_increment\b/) {
					$needs_fixing = 1;
					print "$sql_table_name.$sql_field_name: extra should contain 'auto_increment' but appears to be '",
						lc($sql_field_rec->{Extra}), "'\n";
				}
				
				# FIXME instead of checking this, figure out how to use "SHOW INDEXES FROM `$sql_table_name`"
				#unless ("pri" eq lc($sql_field_rec->{Key})) {
				#	$needs_fixing = 1;
				#	print "$sql_table_name.$sql_field_name: key should be 'pri' but appears to be '",
				#		lc($sql_field_rec->{Key}), "'\n";
				#}
				
			} else {
				
				unless (lc($ww_field_rec->{sql_type}) eq lc($sql_base_type)) {
					$needs_fixing = 1;
					print "$sql_table_name.$sql_field_name: type should be '", lc($ww_field_rec->{sql_type}),
						"' but appears to be '", lc($sql_base_type), "'\n";
				}
				
				# FIXME instead of checking this, figure out how to use "SHOW INDEXES FROM `$sql_table_name`"
				#unless ( $ww_field_rec->{is_keyfield} == (lc($sql_field_rec->{Key}) eq "mul") ) {
				#	$needs_fixing = 1;
				#	print "$sql_table_name.$sql_field_name: key should be '",
				#		($ww_field_rec->{is_keyfield} ? "mul" : ""), "' but appears to be '",
				#		lc($sql_field_rec->{Key}), "'\n";
				#}
			}
			
			$needs_fixing and maybe_change_field($ww_course_name, $ww_table_name, $ww_field_name, $sql_base_type);
			
		} else {
			print "$sql_table_name.$sql_field_name: field missing\n";
			maybe_add_field($ww_course_name, $ww_table_name, $ww_field_name);
		}
	}
}

sub ask_add_field {
	my ($ww_course_name, $ww_table_name, $ww_field_name) = @_;
	my $ww_table_rec = $ww_table_data{$ww_table_name};
	my $sql_table_name = get_sql_table_name($ww_table_rec->{sql_name}, $ww_course_name);
	my $sql_field_name = $ww_table_rec->{fields}{$ww_field_name}{sql_name};
	
	my $stmt = add_field_stmt($ww_table_rec, $ww_field_name, $sql_table_name);
	
	print "\nI can add this field to the database with the following SQL statement:\n";
	print "$stmt\n\n";
	return 0 unless ask_permission("Add field '$sql_table_name.$sql_field_name'?");
	
	return unless do_handle_error($dbh, $stmt);
	print "Added field '$sql_field_name'.\n\n";
	
	return 0;
}

sub add_field_stmt {
	my ($ww_table_rec, $ww_field_name, $sql_table_name) = @_;
	my $sql_field_name = $ww_table_rec->{fields}{$ww_field_name}{sql_name};
	my $sql_field_type = $ww_table_rec->{fields}{$ww_field_name}{sql_type};
	my $location_modifier = get_location_modifier($ww_table_rec, $ww_field_name);
	
	return "ALTER TABLE `$sql_table_name` ADD COLUMN `$sql_field_name` $sql_field_type $location_modifier";
}

sub get_location_modifier {
	my ($ww_table_rec, $ww_field_name) = @_;
	
	my $field_index = -1;
	
	for (my $i = 0; $i < @{$ww_table_rec->{field_order}}; $i++) {
		if ($ww_table_rec->{field_order}[$i] eq $ww_field_name) {
			$field_index = $i;
			last;
		}
	}
	
	if ($field_index < 0) {
		die "field '$ww_field_name' not found in field_order (shouldn't happen!)";
	} elsif ($field_index > 0) {
		my $ww_prev_field_name = $ww_table_rec->{field_order}[$field_index-1];
		my $sql_prev_field_name = $ww_table_rec->{fields}{$ww_prev_field_name}{sql_name};
		return "AFTER `$sql_prev_field_name`";
	} else {
		return "FIRST";
	}
}

sub ask_change_field {
	my ($ww_course_name, $ww_table_name, $ww_field_name, $sql_curr_base_type) = @_;
	my $ww_table_rec = $ww_table_data{$ww_table_name};
	my $sql_table_name = get_sql_table_name($ww_table_rec->{sql_name}, $ww_course_name);
	my $sql_field_name = $ww_table_rec->{fields}{$ww_field_name}{sql_name};
	
	my @stmts = change_field_stmts($ww_table_rec, $ww_field_name, $sql_table_name, $sql_curr_base_type);
	
	my $pl = @stmts == 1 ? "" : "s";
	print "\nI can change this field with the following SQL statement$pl:\n";
	print map("$_\n", @stmts), "\n";
	return 0 unless ask_permission("Change field '$sql_table_name.$sql_field_name'?");
	
	foreach my $stmt (@stmts) {
		return unless do_handle_error($dbh, $stmt);
	}
	print "Changed field '$sql_field_name'.\n\n";
	
	return 0;
}

sub change_field_stmts {
	my ($ww_table_rec, $ww_field_name, $sql_table_name, $sql_curr_base_type) = @_;
	my $sql_field_name = $ww_table_rec->{fields}{$ww_field_name}{sql_name};
	my $sql_field_type = $ww_table_rec->{fields}{$ww_field_name}{sql_type};
	
	if ($sql_curr_base_type =~ /text/i and $sql_field_type =~ /int/i) {
		return (
			"ALTER TABLE `$sql_table_name` CHANGE COLUMN `$sql_field_name` `$sql_field_name` VARCHAR(255)",
			"ALTER TABLE `$sql_table_name` CHANGE COLUMN `$sql_field_name` `$sql_field_name` $sql_field_type",
		);
	} else {
		return "ALTER TABLE `$sql_table_name` CHANGE COLUMN `$sql_field_name` `$sql_field_name` $sql_field_type";
	}
}

################################################################################

sub get_sql_table_name {
	my ($template, $course_name) = @_;
	
	$template =~ s/$random_courseID/$course_name/g;
	return $template;
}

sub ask_permission {
	my ($prompt, $default) = @_;
	
	$default = 1 if not defined $default;
	my $options = $default ? "[Y/n]" : "[y/N]";
	
	while (1) {
		print "$prompt $options ";
		my $resp = <STDIN>;
		chomp $resp;
		return $default if $resp eq "";
		return 1 if lc $resp eq "y";
		return 0 if lc $resp eq "n";
		$prompt = 'Please enter "y" or "n".';
	}
}

# no error => returns true
# error, user says continue => returns false
# error, user says don't continue => returns undef
# error, user says exit => exits
sub do_handle_error {
	my ($dbh, $stmt) = @_;
	
	eval { $dbh->do($stmt) };
	if ($@) {
		print "SQL statment failed. Here is the error message: $@\n";
		return ask_permission("Continue?", 1);
	} else {
		return 1;
	}
}

sub compare_dbLayouts {
	my ($ce1, $ce2) = @_;
	
	my $dbLayout1 = $ce1->{dbLayoutName};
	my $dbLayout2 = $ce2->{dbLayoutName};
	#warn "Generic: '$dbLayout1' this course: '$dbLayout2'.\n";
	
	# simplisic check for now
	if ($dbLayout1 ne $dbLayout2) {
		return "\$dbLayoutName differs. Generic: '$dbLayout1' this course: '$dbLayout2'. (If you've created"
		. " a modified version of the '$dbLayout1' database layout for use with this course, it's probably"
		. " OK to check this course anyway. Just be sure that any fixes this program proposes are"
		. " appropriate given your modifications.)";
	}
	
	return ();
}

################################################################################

sub get_version_zero_ww_table_data {
	return (
	  'problem_user' => {
		'fields' => {
		  'problem_seed' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'problem_seed'
		  },
		  'status' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'status'
		  },
		  'max_attempts' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'max_attempts'
		  },
		  'value' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'value'
		  },
		  'last_answer' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'last_answer'
		  },
		  'source_file' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'source_file'
		  },
		  'set_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'set_id'
		  },
		  'problem_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'INT',
			'sql_name' => 'problem_id'
		  },
		  'num_incorrect' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'num_incorrect'
		  },
		  'num_correct' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'num_correct'
		  },
		  'attempted' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'attempted'
		  },
		  'user_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'user_id'
		  }
		},
		'keyfield_order' => [
		  'user_id',
		  'set_id',
		  'problem_id'
		],
		'field_order' => [
		  'user_id',
		  'set_id',
		  'problem_id',
		  'source_file',
		  'value',
		  'max_attempts',
		  'problem_seed',
		  'status',
		  'attempted',
		  'last_answer',
		  'num_correct',
		  'num_incorrect'
		],
		'sql_name' => '6SC36NukknC3IT3M_problem_user'
	  },
	  'permission' => {
		'fields' => {
		  'permission' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'permission'
		  },
		  'user_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'user_id'
		  }
		},
		'keyfield_order' => [
		  'user_id'
		],
		'field_order' => [
		  'user_id',
		  'permission'
		],
		'sql_name' => '6SC36NukknC3IT3M_permission'
	  },
	  'key' => {
		'fields' => {
		  'timestamp' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'timestamp'
		  },
		  'user_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'user_id'
		  },
		  'key' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'key_not_a_keyword'
		  }
		},
		'keyfield_order' => [
		  'user_id'
		],
		'field_order' => [
		  'user_id',
		  'key',
		  'timestamp'
		],
		'sql_name' => '6SC36NukknC3IT3M_key'
	  },
	  'password' => {
		'fields' => {
		  'password' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'password'
		  },
		  'user_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'user_id'
		  }
		},
		'keyfield_order' => [
		  'user_id'
		],
		'field_order' => [
		  'user_id',
		  'password'
		],
		'sql_name' => '6SC36NukknC3IT3M_password'
	  },
	  'problem' => {
		'fields' => {
		  'problem_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'INT',
			'sql_name' => 'problem_id'
		  },
		  'max_attempts' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'max_attempts'
		  },
		  'value' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'value'
		  },
		  'source_file' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'source_file'
		  },
		  'set_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'set_id'
		  }
		},
		'keyfield_order' => [
		  'set_id',
		  'problem_id'
		],
		'field_order' => [
		  'set_id',
		  'problem_id',
		  'source_file',
		  'value',
		  'max_attempts'
		],
		'sql_name' => '6SC36NukknC3IT3M_problem'
	  },
	  'user' => {
		'fields' => {
		  'email_address' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'email_address'
		  },
		  'student_id' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'student_id'
		  },
		  'comment' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'comment'
		  },
		  'status' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'status'
		  },
		  'recitation' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'recitation'
		  },
		  'section' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'section'
		  },
		  'user_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'user_id'
		  },
		  'last_name' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'last_name'
		  },
		  'first_name' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'first_name'
		  }
		},
		'keyfield_order' => [
		  'user_id'
		],
		'field_order' => [
		  'user_id',
		  'first_name',
		  'last_name',
		  'email_address',
		  'student_id',
		  'status',
		  'section',
		  'recitation',
		  'comment'
		],
		'sql_name' => '6SC36NukknC3IT3M_user'
	  },
	  'set_user' => {
		'fields' => {
		  'version_time_limit' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'version_time_limit'
		  },
		  'set_header' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'set_header'
		  },
		  'psvn' => {
			'is_keyfield' => '',
			'sql_type' => 'INT NOT NULL PRIMARY KEY AUTO_INCREMENT',
			'sql_name' => 'psvn'
		  },
		  'hardcopy_header' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'hardcopy_header'
		  },
		  'version_creation_time' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'version_creation_time'
		  },
		  'open_date' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'open_date'
		  },
		  'problem_randorder' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'problem_randorder'
		  },
		  'versions_per_interval' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'versions_per_interval'
		  },
		  'version_last_attempt_time' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'version_last_attempt_time'
		  },
		  'time_interval' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'time_interval'
		  },
		  'set_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'set_id'
		  },
		  'visible' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'visible'
		  },
		  'assignment_type' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'assignment_type'
		  },
		  'due_date' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'due_date'
		  },
		  'answer_date' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'answer_date'
		  },
		  'user_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'user_id'
		  },
		  'attempts_per_version' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'attempts_per_version'
		  }
		},
		'keyfield_order' => [
		  'user_id',
		  'set_id'
		],
		'field_order' => [
		  'user_id',
		  'set_id',
		  'psvn',
		  'set_header',
		  'hardcopy_header',
		  'open_date',
		  'due_date',
		  'answer_date',
		  'visible',
		  'assignment_type',
		  'attempts_per_version',
		  'time_interval',
		  'versions_per_interval',
		  'version_time_limit',
		  'version_creation_time',
		  'problem_randorder',
		  'version_last_attempt_time'
		],
		'sql_name' => '6SC36NukknC3IT3M_set_user'
	  },
	  'set' => {
		'fields' => {
		  'version_last_attempt_time' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'version_last_attempt_time'
		  },
		  'version_time_limit' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'version_time_limit'
		  },
		  'versions_per_interval' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'versions_per_interval'
		  },
		  'time_interval' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'time_interval'
		  },
		  'set_header' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'set_header'
		  },
		  'set_id' => {
			'is_keyfield' => 1,
			'sql_type' => 'BLOB',
			'sql_name' => 'set_id'
		  },
		  'hardcopy_header' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'hardcopy_header'
		  },
		  'visible' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'visible'
		  },
		  'version_creation_time' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'version_creation_time'
		  },
		  'due_date' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'due_date'
		  },
		  'assignment_type' => {
			'is_keyfield' => '',
			'sql_type' => 'TEXT',
			'sql_name' => 'assignment_type'
		  },
		  'open_date' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'open_date'
		  },
		  'answer_date' => {
			'is_keyfield' => '',
			'sql_type' => 'BIGINT',
			'sql_name' => 'answer_date'
		  },
		  'attempts_per_version' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'attempts_per_version'
		  },
		  'problem_randorder' => {
			'is_keyfield' => '',
			'sql_type' => 'INT',
			'sql_name' => 'problem_randorder'
		  }
		},
		'keyfield_order' => [
		  'set_id'
		],
		'field_order' => [
		  'set_id',
		  'set_header',
		  'hardcopy_header',
		  'open_date',
		  'due_date',
		  'answer_date',
		  'visible',
		  'assignment_type',
		  'attempts_per_version',
		  'time_interval',
		  'versions_per_interval',
		  'version_time_limit',
		  'version_creation_time',
		  'problem_randorder',
		  'version_last_attempt_time'
		],
		'sql_name' => '6SC36NukknC3IT3M_set'
	  }
	);
}
