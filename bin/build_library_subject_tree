#!/usr/bin/env perl

# This is the script build-library-tree

# This is used to create the file library-tree.json which can be used to load in 
# subject-chapter-section information for the OPL

use strict;
use warnings;
use File::Find;
use File::Basename;
use Cwd;
use open qw/:std :utf8/;
use DBI;
use Data::Dumper;
use JSON;
use IO::Handle;

 #(maximum varchar length is 255 for mysql version < 5.0.3.  
 #You can increase path length to  4096 for mysql > 5.0.3)

BEGIN {
        die "WEBWORK_ROOT not found in environment.\n"
                unless exists $ENV{WEBWORK_ROOT};
	# Unused variable, but define it to avoid an error message.
	$WeBWorK::Constants::WEBWORK_DIRECTORY = '';
}

# Get database connection

use lib "$ENV{WEBWORK_ROOT}/lib";
use WeBWorK::CourseEnvironment;

my $ce = new WeBWorK::CourseEnvironment({webwork_dir=>$ENV{WEBWORK_ROOT}});
my $dbh = DBI->connect(
        $ce->{database_dsn},
        $ce->{database_username},
        $ce->{database_password},
        {
                PrintError => 0,
                RaiseError => 1,
        },
);

my $libraryRoot = $ce->{problemLibrary}->{root};
$libraryRoot =~ s|/+$||;
my $libraryVersion = $ce->{problemLibrary}->{version};

my $selectClause = "select subj.name, ch.name, sect.name, path.path,pg.filename from OPL_DBsection AS sect "
	."JOIN OPL_DBchapter AS ch ON ch.DBchapter_id = sect.DBchapter_id "
	."JOIN OPL_DBsubject AS subj ON subj.DBsubject_id = ch.DBsubject_id "
	."JOIN OPL_pgfile AS pg ON sect.DBsection_id = pg.DBsection_id "
	."JOIN OPL_path AS path ON pg.path_id = path.path_id ";

my $tree;  # the library subject tree will be stored as arrays of objects. 

my $results = $dbh->selectall_arrayref("select subj.name from OPL_DBsubject AS subj");

my @subject_names = map { $_->[0]} @{$results};

my $i=0; # counter to print to the screen.

STDOUT->printflush("Building the subject-tree.  There are " . scalar(@subject_names) . " subjects\n");

my @subject_tree;  # array to store the individual library tree for each subject 

for my $subj_name (@subject_names){
	$i++;
	my $subj = $subj_name;
	$subj =~ s/'/\'/g;


	my $results = $dbh->selectall_arrayref("select ch.name from OPL_DBsubject AS subj JOIN OPL_DBchapter AS ch "
			. " ON subj.DBsubject_id = ch.DBsubject_id WHERE subj.name='$subj';");
	my @chapter_names = map {$_->[0]} @{$results};

	my @chapter_tree; # array to store the individual library tree for each chapter

	print Dumper(\@chapter_names);

	for my  $ch_name (@chapter_names){
	
		my $ch = $ch_name;
		$ch =~ s/'/\'/g;

		my $results = $dbh->selectall_arrayref("SELECT sect.name from OPL_DBsubject AS subj "
				."JOIN OPL_DBchapter AS ch ON subj.DBsubject_id = ch.DBsubject_id "
				."JOIN OPL_DBsection AS sect ON sect.DBchapter_id = ch.DBchapter_id "
				."WHERE subj.name='$subj' AND ch.name='$ch';");

		my @section_names = map { $_->[0]} @{$results};

		my @subfields = ();
		
		for my $sect_name (@section_names){
			my $section_tree = {};
			$section_tree->{name} = $sect_name;
			## Determine the number of files that falls into each

			my $sect = $section_tree->{name};
			$sect =~ s/'/\\'/g;

			my $whereClause ="WHERE sect.name='$sect' AND ch.name='$ch' AND subj.name='$subj'";

			my $sth = $dbh->prepare($selectClause.$whereClause);
			$sth->execute;
			my $numFiles= $sth->rows;
			$section_tree->{num_files} = $numFiles;

			my $clone = { %{ $section_tree } };  # need to clone it before pushing into the @subfield array.

		    push(@subfields,$clone);
	    }

		my $chapter_tree;
		$chapter_tree->{name} = $ch_name;
		$chapter_tree->{subfields} = \@subfields;

		## determine the number of files in each chapter

		my $whereClause ="WHERE subj.name='$subj' AND ch.name='$ch'";


		my $sth = $dbh->prepare($selectClause.$whereClause);
		$sth->execute;
		my $numFiles = $sth->rows;
		# my $allFiles = $sth->fetchall_arrayref;
		 $chapter_tree->{num_files} = $numFiles;

		my $clone = { %{ $chapter_tree } };  # need to clone it before pushing into the @chapter_tree array.
		push(@chapter_tree,$clone);



	}

	my $subject_tree; 
	$subject_tree->{name} = $subj_name;
	$subject_tree->{subfields} = \@chapter_tree; 

	## find the number of files on the subject level

	my $whereClause ="WHERE subj.name='$subj'";


	my $sth = $dbh->prepare($selectClause.$whereClause);
	$sth->execute;
	my $numFiles = $sth->rows;
	$subject_tree->{num_files} = $numFiles;

	STDOUT->printflush(($i+1) . " ");


	my $clone = { % {$subject_tree}};
	push (@subject_tree, $clone);
}

print "\n";



$dbh->disconnect;

my $webwork_htdocs = $ce->{webwork_dir}."/htdocs";
my $file = "$webwork_htdocs/DATA/library-subject-tree.json";

# use a variable for the file handle
my $OUTFILE;

# use the three arguments version of open
# and check for errors
open $OUTFILE, '>', $file  or die "Cannot open $file";

# you can check for errors (e.g., if after opening the disk gets full)
print { $OUTFILE } to_json(\@subject_tree,{pretty=>1}) or die "Cannot write to $file";

# check for errors
close $OUTFILE or die "Cannot close $file";


print "Wrote Library Tree to $file\n";

