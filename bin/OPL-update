#!/usr/bin/perl

# This is the script formerly known as loadDB2, and then known as NPL-update.  

#It is used to update
# the database when it comes to the WeBWorK Open Problem Library (OPL).
# This should be run after doing a git clone or pull for the OPL
# files.

# In order for this script to work:
#   1) The OPL downloaded to your machine (the .pg files)
#   2) The environment variable WEBWORK_ROOT needs to be 
#      correctly defined (as with other scripts here).
#   3) Configuration for the OPL in site.conf needs to be
#      done (basically just setting the path to the OPL files).

#use strict;
use File::Find;
use File::Basename;
use Cwd;
use DBI;

 #(maximum varchar length is 255 for mysql version < 5.0.3.  
 #You can increase path length to  4096 for mysql > 5.0.3)

BEGIN {
        die "WEBWORK_ROOT not found in environment.\n"
                unless exists $ENV{WEBWORK_ROOT};
}

### Data for creating the database tables


my %OPLtables = (
 dbsubject => 'OPL_DBsubject',
 dbchapter => 'OPL_DBchapter',
 dbsection => 'OPL_DBsection',
 author => 'OPL_author',
 path => 'OPL_path',
 pgfile => 'OPL_pgfile',
 keyword => 'OPL_keyword',
 pgfile_keyword => 'OPL_pgfile_keyword',
 textbook => 'OPL_textbook',
 chapter => 'OPL_chapter',
 section => 'OPL_section',
 problem => 'OPL_problem',
 pgfile_problem => 'OPL_pgfile_problem',
);


my %NPLtables = (
 dbsubject => 'NPL-DBsubject',
 dbchapter => 'NPL-DBchapter',
 dbsection => 'NPL-DBsection',
 author => 'NPL-author',
 path => 'NPL-path',
 pgfile => 'NPL-pgfile',
 keyword => 'NPL-keyword',
 pgfile_keyword => 'NPL-pgfile-keyword',
 textbook => 'NPL-textbook',
 chapter => 'NPL-chapter',
 section => 'NPL-section',
 problem => 'NPL-problem',
 pgfile_problem => 'NPL-pgfile-problem',
);


# Get database connection

use lib "$ENV{WEBWORK_ROOT}/lib";
use WeBWorK::CourseEnvironment;

my $ce = new WeBWorK::CourseEnvironment({webwork_dir=>$ENV{WEBWORK_ROOT}});
my $dbh = DBI->connect(
        $ce->{database_dsn},
        $ce->{database_username},
        $ce->{database_password},
        {
                PrintError => 0,
                RaiseError => 1,
        },
);

my $passwd = $ce->{database_password};
my $user = $ce->{database_username};
my $libraryRoot = $ce->{problemLibrary}->{root};
my $verbose = 0;
my $cnt2 = 0;

$| = 1; # autoflush output

sub dbug {
	my $msg = shift;
	my $insignificance = shift || 2;
	print $msg if($verbose>=$insignificance);
}

##Figure out which set of tables to use

my %tables;
if( -e "$libraryRoot/VERSION") {
  include("$libraryRoot/VERSION");
  if($OPL_VERSION eq '2.5.0') {
	%tables = %OPLtables;
	my $lib = 'OPL';
	print "Got OPLtables!\n";
  } else {
	%tables = %NPLtables;
	my $lib = 'NPL';
	print "Got NPLtables! (1)\n";
  }
} else {
	%tables = %NPLtables;
	my $lib = 'NPL';
	print "Got NPLtables! (2)\n";
}

@create_tables = (
[$tables{dbsubject}, '
	DBsubject_id int(15) NOT NULL auto_increment,
	name varchar(127) NOT NULL,
	KEY DBsubject (name),
	PRIMARY KEY (DBsubject_id)
'],
[$tables{dbchapter}, '
	DBchapter_id int(15) NOT NULL auto_increment,
	name varchar(127) NOT NULL,
	DBsubject_id int(15) DEFAULT 0 NOT NULL,
	KEY DBchapter (name),
	KEY (DBsubject_id),
	PRIMARY KEY (DBchapter_id)
'],
[$tables{dbsection}, '
	DBsection_id int(15) NOT NULL auto_increment,
	name varchar(255) NOT NULL,
	DBchapter_id int(15) DEFAULT 0 NOT NULL,
	KEY DBsection (name),
	KEY (DBchapter_id),
	PRIMARY KEY (DBsection_id)
'],
[$tables{author}, '
	author_id int (15) NOT NULL auto_increment,
	institution tinyblob,
	lastname varchar (100) NOT NULL,
	firstname varchar (100) NOT NULL,
	email varchar (255),
	KEY author (lastname, firstname),
	PRIMARY KEY (author_id)
'],
[$tables{path}, '
	path_id int(15) NOT NULL auto_increment,
	path varchar(255) NOT NULL,
	machine varchar(127),
	user varchar(127),
	KEY (path),
	PRIMARY KEY (path_id)
'],
[$tables{pgfile}, '
	pgfile_id int(15) NOT NULL auto_increment,
	DBsection_id int(15) NOT NULL,
	author_id int(15),
	institution tinyblob,
	path_id int(15) NOT NULL,
	filename varchar(255) NOT NULL,
	PRIMARY KEY (pgfile_id)
'],
[$tables{keyword}, '
	keyword_id int(15) NOT NULL auto_increment,
	keyword varchar(65) NOT NULL,
	KEY (keyword),
	PRIMARY KEY (keyword_id)
'],
[$tables{pgfile_keyword}, '
	pgfile_id int(15) DEFAULT 0 NOT NULL,
	keyword_id int(15) DEFAULT 0 NOT NULL,
	KEY pgfile_keyword (keyword_id, pgfile_id),
	KEY pgfile (pgfile_id)
'],
[$tables{textbook}, '
	textbook_id int (15) NOT NULL auto_increment,
	title varchar (255) NOT NULL,
	edition int (3) DEFAULT 0 NOT NULL,
	author varchar (63) NOT NULL,
	publisher varchar (127),
	isbn char (15),
	pubdate varchar (27),
	PRIMARY KEY (textbook_id)
'],
[$tables{chapter}, '
	chapter_id int (15) NOT NULL auto_increment,
	textbook_id int (15),
	number int(3),
	name varchar(127) NOT NULL,
	page int(4),
	KEY (textbook_id, name),
	KEY (number),
	PRIMARY KEY (chapter_id)
'],
[$tables{section}, '
	section_id int(15) NOT NULL auto_increment,
	chapter_id int (15),
	number int(3),
	name varchar(127) NOT NULL,
	page int(4),
	KEY (chapter_id, name),
	KEY (number),
	PRIMARY KEY section (section_id)
'],
[$tables{problem}, '
	problem_id int(15) NOT NULL auto_increment,
	section_id int(15),
	number int(4) NOT NULL,
	page int(4),
	#KEY (page, number),
	KEY (section_id),
	PRIMARY KEY (problem_id)
'],
[$tables{pgfile_problem}, '
	pgfile_id int(15) DEFAULT 0 NOT NULL,
	problem_id int(15) DEFAULT 0 NOT NULL,
	PRIMARY KEY (pgfile_id, problem_id)
']);

### End of database data

## Resetting the database tables.
#  First take care of tables which are no longer used

$dbh->do("DROP TABLE IF EXISTS `NPL-institution`");
$dbh->do("DROP TABLE IF EXISTS `NPL-pgfile-institution`");

for my $tableinfo (@create_tables) {
    my $tabname = $tableinfo->[0];
    my $tabinit = $tableinfo->[1];
	my $query = "DROP TABLE IF EXISTS `$tabname`";
	$dbh->do($query);
	$query = "CREATE TABLE `$tabname` ( $tabinit )";
	$dbh->do($query);
	if($lib eq 'OPL') {
		$old_tabname = $tabname;
		$old_tabname =~ s/OPL/NPL/;
		$old_tabname =~ s/_/-/g;
		$query = "DROP TABLE IF EXISTS `$old_tabname`";
		$dbh -> do($query);
	}
}


print "Mysql database reinitialized.\n";

# From pgfile
## DBchapter('Limits and Derivatives')
## DBsection('Calculating Limits using the Limit Laws')
## Date('6/3/2002')
## Author('Tangan Gao')
## Institution('csulb')
## TitleText1('Calculus Early Transcendentals')
## EditionText1('4')
## AuthorText1('Stewart')
## Section1('2.3')
## Problem1('7')
#
# The database structure is in the file create_tables2.sql and its ER-graph is 
#    the file wwdb_er_graph.pdf. 

my ($name,$pgfile,$pgpath);

#### First read in textbook information

if(open(IN, "$libraryRoot/Textbooks")) {
	print "Reading in textbook data from Textbooks in the library $libraryRoot.\n";
	my %textinfo = ( TitleText => '', EditionText =>'', AuthorText=>'');
	my $bookid = undef;
	while (my $line = <IN>) {
		$line =~ s|#*$||;
		if($line =~ /^\s*(.*?)\s*>>>\s*(.*?)\s*$/) { # Should have chapter or section information
			my $chapsec = $1;
			my $title = $2;
			if($chapsec=~ /(\d+)\.(\d+)/) { # We have a section
				if(defined($bookid)) {
					my $query = "SELECT chapter_id FROM `$tables{chapter}` WHERE textbook_id = \"$bookid\" AND number = \"$1\"";
					my $chapid = $dbh->selectrow_array($query);
					if(defined($chapid)) {
						$query = "SELECT section_id FROM `$tables{section}` WHERE chapter_id = \"$chapid\" AND name = \"$title\"";
						my $sectid = $dbh->selectrow_array($query);
						if (!defined($sectid)) {
							$dbh->do("INSERT INTO `$tables{section}`
					VALUES(
						\"\",
						\"$chapid\",
						\"$2\",
						\"$title\",
						\"\"
					)"
								);
							dbug "INSERT INTO section VALUES(\"\", \"$chapid\", \"$2\", \"$title\", \"\" )\n";
						}
					} else {
						print "Cannot enter section $chapsec because textbook information is missing the chapter entry\n";
					}
				} else {
					print "Cannot enter section $chapsec because textbook information is incomplete\n";
				}
			} else { # We have a chapter entry
				if(defined($bookid)) {
					my $query = "SELECT chapter_id FROM `$tables{chapter}` WHERE textbook_id = \"$bookid\" AND number = \"$chapsec\"";
					my $chapid = $dbh->selectrow_array($query);
					if (!defined($chapid)) {
						$dbh->do("INSERT INTO `$tables{chapter}`
					VALUES(
						\"\",
						\"$bookid\",
						\"".$chapsec."\",
						\"$title\",
						\"\"
					)"
							);
						$chapid = $dbh->selectrow_array($query);

						# Add dummy section entry for problems tagged to the chapter
						# without a section
						$query = "SELECT section_id FROM `$tables{section}` WHERE chapter_id = \"$chapid\" AND number = -1";
						my $sectid = $dbh->selectrow_array($query);
						if (!defined($sectid)) {
							$dbh->do("INSERT INTO `$tables{section}`
						VALUES(
							\"\",
							\"$chapid\",
							\"-1\",
							\"\",
							\"\"
						)"
								);
						dbug "INSERT INTO section VALUES(\"\", \"$chapid\", \"-1\", \"\", \"\" )\n";
						}
					}
				} else {
					print "Cannot enter chapter $chapsec because textbook information is incomplete\n";
				}
			}
		} elsif($line =~ /^\s*(TitleText|EditionText|AuthorText)\(\s*'(.*?)'\s*\)/) {
			# Textbook information, maybe new
			my $type = $1;
			if(defined($textinfo{$type})) { # signals new text
				%textinfo = ( TitleText => undef, 
							  EditionText =>undef, 
							  AuthorText=> undef);
				$textinfo{$type} = $2;
				$bookid = undef;
			} else {
				$textinfo{$type} = $2;
				if(defined($textinfo{TitleText}) and 
				   defined($textinfo{AuthorText}) and 
				   defined($textinfo{EditionText})) {
					my $query = "SELECT textbook_id FROM `$tables{textbook}` WHERE title = \"$textinfo{TitleText}\" AND edition = \"$textinfo{EditionText}\" AND author=\"$textinfo{AuthorText}\"";
					$bookid = $dbh->selectrow_array($query);
					if (!defined($bookid)) {
						$dbh->do("INSERT INTO `$tables{textbook}`
					VALUES(
						\"\",
						\"$textinfo{TitleText}\",
						\"$textinfo{EditionText}\",
						\"$textinfo{AuthorText}\",
						\"\",
						\"\",
						\"\"
					)"
							);
						dbug "INSERT INTO textbook VALUES( \"\", \"$textinfo{TitleText}\", \"$textinfo{EditionText}\", \"$textinfo{AuthorText}\", \"\", \"\", \"\" )\n";
						$bookid = $dbh->selectrow_array($query);
					}
				}
			}
		}
	}
	close(IN);
} else{
	print "Textbooks file was not found in library $libraryRoot. If the path to the problem library doesn't seem
	correct, make modifications in webwork2/conf/site.conf (\$problemLibrary{root}).  If that is correct then
	updating from cvs should download the Textbooks file.\n";
}

print "Converting data from tagged pgfiles into mysql.\n";
print "Number of files processed:\n";

#### Now search for tagged problems
#recursive search for all pg files

find({ wanted => \&pgfiles, follow_fast=> 1}, $libraryRoot);

sub kwtidy {
	my $s = shift;
	$s =~ s/\W//g;
	$s =~ s/_//g;
	$s = lc($s);
	return($s);
}

sub keywordcleaner {
	my $string = shift;
	my @spl1 = split /,/, $string;
	my @spl2 = map(kwtidy($_), @spl1);
	return(@spl2);
}

# Save on passing these values around
my %textinfo;

# Initialize, if needed more text-info information;
sub maybenewtext {
	my $textno = shift;
	return if defined($textinfo{$textno});
	# So, not defined yet
	$textinfo{$textno} = { title => '', author =>'', edition =>'',
						   section => '', chapter =>'', problems => [] };
}

# process each file returned by the find command.
sub pgfiles {
	my $name = $File::Find::name;
	my ($subject, $chapter, $section, $date, $institution, $author, $text);
	my ($edition, $textauthor, $textsection, $textproblem, $tagged);
	%textinfo=();
	my @textproblems = (-1);
	if ($name =~ /pg$/) {
		$pgfile = basename($name);
		$pgpath = dirname($name);
		$cnt2++;
		printf("%6d", $cnt2) if(($cnt2 % 100) == 0);
		print "\n" if(($cnt2 % 1000) == 0);
		$pgpath =~ s|^$libraryRoot/||;
		open(IN,"$name") or die "can not open $name: $!";
		$tagged = 0;
		while (<IN>) {
		SWITCH: {
				if (/\bKEYWORDS\((.*)\)/i) {
					@keyword = keywordcleaner($1);
					last SWITCH;
				}
				if (/\bDBsubject\s*\(\s*'?(.*?)'?\s*\)/) {
					$subject = $1;
					$subject =~ s/'/\'/g;
					last SWITCH;
				}
				if (/\bDBchapter\s*\(\s*'?(.*?)'?\s*\)/) {
					$chapter = $1;
					$chapter =~ s/'/\'/g;
					$tagged = 1;
					last SWITCH;
				}
				if (/\bDBsection\s*\(\s*'?(.*?)'?\s*\)/) {
					$section = $1;
					$section =~ s/'/\'/g;
					last SWITCH;
				}
				if (/\bDate\s*\(\s*'(.*?)'\s*\)/) {
					$date = $1;
					$date =~ s/'/\'/g;
					last SWITCH;
				}
				if (/\bInstitution\s*\(\s*'(.*?)'\s*\)/) {
					$institution = $1;
					$institution =~ s/'/\'/g;
					last SWITCH;
				}
				if (/\bAuthor\(\s*'?(.*?)'?\s*\)/) {
					$author = $1;
					$author =~ s/'/\'/g;
					last SWITCH;
				}
				if (/\bTitleText(\d+)\(\s*'?(.*?)'?\s*\)/) {
					$textno = $1;
					$text = $2;
					$text =~ s/'/\'/g;
					if ($text =~ /\S/) {
						maybenewtext($textno);
						$textinfo{$textno}->{title} = $text;
					}
					last SWITCH;
				}
				if (/\bEditionText(\d+)\(\s*'?(.*?)'?\s*\)/) {
					$textno = $1;	
					$edition = $2;
					$edition =~ s/'/\'/g;
					if ($edition =~ /\S/) {
						maybenewtext($textno);
						$textinfo{$textno}->{edition} = $edition;
					}
					last SWITCH;
				}
				if (/\bAuthorText(\d+)\(\s*'?(.*?)'?\s*\)/) {
					$textno = $1;
					$textauthor = $2;
					$textauthor =~ s/'/\'/g;
					if ($textauthor =~ /\S/) {
						maybenewtext($textno);
						$textinfo{$textno}->{author} = $textauthor;
					}
					last SWITCH;
				}
				if (/\bSection(\d+)\(\s*'?(.*?)'?\s*\)/) {
					$textno = $1;
					$textsection = $2;
					$textsection =~ s/'/\'/g;
					if ($textsection =~ /\S/) {
						maybenewtext($textno);
						if ($textsection =~ /(\d*?)\.(\d*)/) {
							$textinfo{$textno}->{chapter} = $1;
							$textinfo{$textno}->{section} = $2;
						} else {
							$textinfo{$textno}->{chapter} = $textsection;
							$textinfo{$textno}->{section} = -1;
						}

					}
					last SWITCH;
				}
				if (/\bProblem(\d+)\(\s*(.*?)\s*\)/) {
					$textno = $1;
					$textproblem = $2;
					$textproblem =~ s/\D/ /g;
					@textproblems = split /\s+/, $textproblem;
					@textproblems = grep { $_ =~ /\S/ } @textproblems;
					if (scalar(@textproblems) or defined($textinfo{$textno})) {
						@textproblems = (-1) unless(scalar(@textproblems));
						maybenewtext($textno);
						$textinfo{$textno}->{problems} = \@textproblems;
					}
					#print "$textproblem\n" if ($textproblem !~ /^[\s\d]+$/);
					#		$textproblem =~ s/'/\'/g;
					last SWITCH;
				}
			}
		}						#end of SWITCH and while
		if ($tagged and $chapter eq 'ZZZ-Inserted Text') {
			$tagged=0;
		}
		if ($tagged) {
			#
			# kludge to fix the omission of a subject field
			unless($subject) {
				if ($text =~ /precalculus/i) {
					$subject = "Precalculus";
				} elsif ($text =~ /calculus/i) {
					$subject = "Calculus";
				} elsif ($text =~ /linear/i) {
					$subject = "Linear Algebra";
				} elsif ($text =~ /algebra/i) {
					$subject = "Algebra";
				} elsif ($text =~ /statistic/i) {
					$subject = "Statistics";
				} elsif ($text =~ /financial/i) {
					$subject = "Financial Mathematics";
				} else {
					$subject = "Misc";
				}
			}
			# From the pgfile we just looked at,
			## DBchapter('Limits and Derivatives') 		in $chapter
			## DBsection('Calculating Limits using the Limit Laws') in $section
			## Date('6/3/2002') 				in $date
			## Author('Tangan Gao') 				in $author
			## Institution('csulb') 				in $institution
			## TitleText1('Calculus Early Transcendentals')	in $text
			## EditionText1('4') 				in $edition
			## AuthorText1('Stewart') 				in $textauthor
			## Section1('2.3') 					in $textsection
			## Problem1('7') 					in $textproblem
			#
			# The database structure is in the file create_tables2.sql and its ER-graph
			#    is the file wwdb_er_graph.pdf. Insert, in order, into the tables
			#    in that file.
			#

			#selectrow_array returns first field of first row in scalar context or undef 
			# undef for failure also, $dbh->{RaiseError} = 1 should catch that case.
			#
			# DBsubject table
			#
			$query = "SELECT DBsubject_id FROM `$tables{dbsubject}` WHERE name = \"$subject\"";
			my $DBsubject_id = $dbh->selectrow_array($query);
			if (!defined($DBsubject_id)) {
				$dbh->do(
						 "INSERT INTO `$tables{dbsubject}`
					VALUES(
						\"\",
						\"$subject\"
					)"
						);
				dbug "INSERT INTO DBsubject VALUES(\"\",\"$subject\")\n";
				$DBsubject_id = $dbh->selectrow_array($query);
			}

			# DBchapter table
			#
			$query = "SELECT DBchapter_id FROM `$tables{dbchapter}` WHERE name = \"$chapter\" and DBsubject_id = $DBsubject_id";
			my $DBchapter_id = $dbh->selectrow_array($query);  
			if (!defined($DBchapter_id)) {
				$dbh->do("INSERT INTO `$tables{dbchapter}` 
					VALUES(
						\"\",
						\"$chapter\",
						\"$DBsubject_id\"
					)"
						);
				dbug "INSERT INTO DBchapter VALUES(  \"\", \"$chapter\", \"$DBsubject_id\)\n";
				$DBchapter_id = $dbh->selectrow_array($query);
			}

			# DBsection table
			#
			$query = "SELECT DBsection_id FROM `$tables{dbsection}` WHERE name = \"$section\" AND DBchapter_id = $DBchapter_id";
			my $DBsection_id = $dbh->selectrow_array($query);
			if (!defined($DBsection_id)) {
				$dbh->do("INSERT INTO `$tables{dbsection}`
					VALUES(
						\"\",
						\"$section\",
						\"$DBchapter_id\"
					)"
						);
				dbug "INSERT INTO DBsection VALUES( \"\", \"$section\", \"$DBchapter_id\", \"$DBsubject_id\" )\n";
				$DBsection_id = $dbh->selectrow_array($query);
			}

			# author table
			#
			$author =~ /(.*?)\s(\w+)\s*$/;
			my $firstname = $1;
			my $lastname = $2;
			#remove leading and trailing spaces from firstname, which includes any middle name too.
			$firstname =~ s/^\s*//;
			$firstname =~ s/\s*$//;
			$query = "SELECT author_id FROM `$tables{author}` WHERE lastname = \"$lastname\" AND firstname=\"$firstname\"";
			my $author_id = $dbh->selectrow_array($query);
			if (!defined($author_id)) {
				$dbh->do("INSERT INTO `$tables{author}`
					VALUES(
						\"\",
						\"$institution\",
						\"$lastname\",
						\"$firstname\",
						\"\"
					)"
						);
				dbug "INSERT INTO author VALUES( \"\", \"$institution\", \"$lastname\", \"$firstname\", \"\" )\n";
				$author_id = $dbh->selectrow_array($query);
			}

			# path table
			#
			$query = "SELECT path_id FROM `$tables{path}` WHERE path = \"$pgpath\"";
			my $path_id = $dbh->selectrow_array($query);
			if (!defined($path_id)) {
				$dbh->do("INSERT INTO `$tables{path}`
					VALUES(
						\"\",
						\"$pgpath\",
						\"\",
						\"\"
					)"
						);
				dbug "INSERT INTO path VALUES( \"\", \"$path\", \"\", \"\" )\n";
				$path_id = $dbh->selectrow_array($query);
			}

			# pgfile table
			#
			my $pgfile_id;
			$dbh->do("INSERT INTO `$tables{pgfile}`
					VALUES(
						\"\",
						\"$DBsection_id\",
						\"$author_id\",
						\"$institution\",
						\"$path_id\",
						\"$pgfile\"
					)"
					);
			dbug "INSERT INTO pgfile VALUES( \"\", \"$DBsection_id\", \"$author_id\", \"$institution\", \"$path_id\", \"$pgfile\", \"\" )\n";
			$query = "SELECT pgfile_id FROM `$tables{pgfile}` WHERE filename = \"$pgfile\" and path_id=$path_id";
			$pgfile_id = $dbh->selectrow_array($query);

			# keyword table, and problem_keyword many-many table
			#
			foreach my $keyword (@keyword) {
				$keyword =~ s/[\'\"]//g;
				$query = "SELECT keyword_id FROM `$tables{keyword}` WHERE keyword = \"$keyword\"";
				my $keyword_id = $dbh->selectrow_array($query);
				if (!defined($keyword_id)) {
					$dbh->do("INSERT INTO `$tables{keyword}`
						VALUES(
							\"\",
							\"$keyword\"
						)"
							);
					dbug "INSERT INTO keyword VALUES( \"\", \"$keyword\")\n";
					$keyword_id = $dbh->selectrow_array($query);
				}

				$query = "SELECT pgfile_id FROM `$tables{pgfile_keyword}` WHERE keyword_id = \"$keyword_id\" and pgfile_id=\"$pgfile_id\"";
				my $ok = $dbh->selectrow_array($query);
				if (!defined($ok)) {
					$dbh->do("INSERT INTO `$tables{pgfile_keyword}`
						VALUES(
							\"$pgfile_id\",
							\"$keyword_id\"
						)"
							);
					dbug "INSERT INTO pgfile_keyword VALUES( \"$pgfile_id\", \"$keyword_id\" )\n";
				}
			}					#end foreach keyword

			# Textbook section
			# problem table contains textbook problems
			#
			for my $textno (keys %textinfo) {
				my $texthashref = $textinfo{$textno};

				# textbook table
				#
				$text = $texthashref->{title};
				$edition = $texthashref->{edition};
				$textauthor = $texthashref->{author};
				next unless($text and $textauthor);
				my $chapnum = $texthashref->{chapter};
				my $secnum = $texthashref->{section};
				$query = "SELECT textbook_id FROM `$tables{textbook}` WHERE title = \"$text\" AND edition = \"$edition\" AND author=\"$textauthor\"";
				my $textbook_id = $dbh->selectrow_array($query);
				if (!defined($textbook_id)) {
					$dbh->do("INSERT INTO `$tables{textbook}`
					VALUES(
						\"\",
						\"$text\",
						\"$edition\",
						\"$textauthor\",
						\"\",
						\"\",
						\"\"
					)"
							);
					dbug "INSERT INTO textbook VALUES( \"\", \"$text\", \"$edition\", \"$textauthor\", \"\", \"\", \"\" )\n";
					dbug "\nLate add into $tables{textbook} \"$text\", \"$edition\", \"$textauthor\"\n", 1;
					$textbook_id = $dbh->selectrow_array($query);
				}

				# chapter weak table of textbook
				#
				$query = "SELECT chapter_id FROM `$tables{chapter}` WHERE textbook_id = \"$textbook_id\" AND number = \"$chapnum\"";
				my $chapter_id = $dbh->selectrow_array($query);
				if (!defined($chapter_id)) {
					$dbh->do("INSERT INTO `$tables{chapter}`
					VALUES(
						\"\",
						\"$textbook_id\",
						\"".$chapnum."\",
						\"$chapter\",
						\"\"
					)"
							);
					dbug "\nLate add into $tables{chapter} \"$text\", \"$edition\", \"$textauthor\", $chapnum $chapter from $name\n", 1;
					dbug "INSERT INTO chapter VALUES(\"\", \"$textbook_id\", \"".$chapnum."\", \"$chapter\", \"\" )\n";
					$chapter_id = $dbh->selectrow_array($query);
				}

				# section weak table of textbook
				#
				$section = '' if ($secnum < 0);
				$query = "SELECT section_id FROM `$tables{section}` WHERE chapter_id = \"$chapter_id\" AND number = \"$secnum\"";
				my $section_id = $dbh->selectrow_array($query);
				if (!defined($section_id)) {
					$dbh->do("INSERT INTO `$tables{section}`
					VALUES(
						\"\",
						\"$chapter_id\",
						\"$secnum\",
						\"$section\",
						\"\"
					)"
							);
					dbug "INSERT INTO section VALUES(\"\", \"$textbook_id\", \"$secnum\", \"$section\", \"\" )\n";
					dbug "\nLate add into $tables{section} \"$text\", \"$edition\", \"$textauthor\", $secnum $section from $name\n", 1;
					$section_id = $dbh->selectrow_array($query);
				}

				@textproblems = @{$texthashref->{problems}};
				for my $tp (@textproblems) {
					$query = "SELECT problem_id FROM `$tables{problem}` WHERE section_id = \"$section_id\" AND number = \"$tp\"";
					my $problem_id = $dbh->selectrow_array($query);
					if (!defined($problem_id)) {
						$dbh->do("INSERT INTO `$tables{problem}`
					VALUES(
						\"\",
						\"$section_id\",
						\"$tp\",
						\"\"
					)"
								);
						dbug "INSERT INTO problem VALUES( \"\", \"$section_id\", \"$tp\", \"\" )\n";
						$problem_id = $dbh->selectrow_array($query);
					}

					# pgfile_problem table associates pgfiles with textbook problems
					#
					$query = "SELECT problem_id FROM `$tables{pgfile_problem}` WHERE problem_id = \"$problem_id\" AND pgfile_id = \"$pgfile_id\"";
					my $pg_problem_id = $dbh->selectrow_array($query);  
					if (!defined($pg_problem_id)) {
						$dbh->do("INSERT INTO `$tables{pgfile_problem}`
					VALUES(
						\"$pgfile_id\",
						\"$problem_id\"
					)"
								);
						dbug "INSERT INTO pgfile_problem VALUES( \"$pgfile_id\", \"$problem_id\" )\n";
					}
				}

				#reset tag vars, they may not match the next text/file
				$date =""; $textauthor=""; $textsection="";
				$chapter=""; $section="";
			}
		}
		close(IN) or die "can not close: $!";
	}
}


$dbh->disconnect;

print "\nDone.\n";
