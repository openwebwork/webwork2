# checks to see if a studen finished a set close to the due date

    #test to see if it is within 30 min of the due date
    if (($set->due_date - time()) > 1800) {
	return 0;
    }

    foreach my $problemRecord (@setProblems) {
	if ($problemRecord->status != 1) {
	    return 0;
	}
    }
    
    return 1;

# -You have access to a variety of variables:
#   - $problem : the problem data (changes to this variable will not be saved!)
#       This variable contains the problem data.  It is a hash pointer with the
#       following values (not all values shown)
#       - $problem->status : the score of the current problem
#       - $problem->problem_id : the id of the current problem
#       - $problem->set_id : the id of the set containing the problem
#       - $problem->num_correct : the number of correct attempts
#       - $problem->num_incorrect : the number of incorrect attempts
#       - $problem->last_answer : the last answer submitted
#       - $problem->max_attempts : the maximum number of allowed attempts
#   
#   - $set : the set data (changes to this variable will not be saved!)
#       This variable contains the set data.  it is a hash pointer with the
#       following values. (not all values shown)
#       - $set->open_date : when the set was open
#       - $set->due_date : when the set is due
#     
#   - @setProblems : the problem data for all the problems from this set.  
#       (changes to this variable will not be saved!)
#       This is an array of problem hashes.  Each element of the array has the
#       save hash keys as the $problem variable above
#
#   - $counter : the users counter associated to this achievement
#       (changes to this variable *will* be saved!)
#       If this achievement has a counter associated to it (i.e. solve 20 problems)
#       then this is where you store the students counter for this achievement. 
#       This variable will initally start as ''
#
#   - $maxCounter : the goal for the $counter variable for this achievement
#       (changes to this variable will not be saved!)
#       If this achievement has a counter associated to it then this variable 
#       contains the goal for the counter.  Your achievement should return 1 
#       when $counter >= $maxCounter.  These two variables are used to show a 
#       progress bar for the achievement.  
#
#   - $localData : this is a hash which stores data for this user and achievement
#       (changes to this variable *will* be saved!)
#       This hash will persist from evaluation to evaluation.  You can store whatever
#       you like in here and it can be accessed next time this evaluator is run.  
#       Two things to keep in mind. The data in this hash will *not* be accessable
#       by other achievements.  If you plan to store something in this hash you have
#       to write code to initialize the data. 
#
#   - $globalData : this is a hash which stores data for all achievements
#       (changes to this variable *will* be saved!)
#       This hash will persist from evaluation to evaluation and, like $localData, 
#       you can store whatever you like in here.  This data will be accessable from
#       *every* achievement and is unique to the user.  Like $localData, you need to
#       initialize any variable you plan on using in this hash.  There are two
#       variables stored in this hash that are maintained by the system. 
#       - $globalData->{completeSets} : This is the number of sets which the student
#                                     has earned 100% on
#       - $globalData->{completeProblems} : This is the number of problems which the
#                                          student has earned 100% on
#       Warning: The achievements are always evaluated in the order they are listed
#         on the Instructors achievement editor page.  To make matters more
#         complicated, achievements which have already been earned are not evaluated
#         at all.  The up-shot of this is that when modifying variables in
#         $globalData you need to either write your code so it doesnt matter which
#         order the evaluators are run in, or you need to pay very close attention
#         to which evaluators are run and when. 