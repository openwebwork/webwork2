##DESCRIPTION
##  find distance between two points, find coordinates of the midpoint of
##  a line segment connecting them
##ENDDESCRIPTION

##KEYWORDS('algebra', 'coordinate geometry', 'distance', 'midpoint')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PG.pl",
"PGbasicmacros.pl",
"PGchoicemacros.pl",
"PGanswermacros.pl",
"PGauxiliaryFunctions.pl"
);

TEXT(&beginproblem);

$showPartialCorrectAnswers = 1;

#install_problem_grader(~~&std_problem_grader);    ##uncomment to use std grader
#install_problem_grader(~~&custom_problem_grader);  ##uncomment to use custom grader


$x1 = random(1,5,1);
$y1 = random(-5,-1,1);
$x2 = random(-10,-3,1);
$y2 = random(-9,-2,1);
$len1 = sqrt(($x1-$x2)**2 + ($y1-$y2)**2);
$midx = ($x1+$x2)/2;
$midy = ($y1+$y2)/2;

BEGIN_TEXT
Consider the two points \( ($x1 ,$y1 )\) and \( ($x2 ,$y2 )\).
The distance between them is:$BR
\{ans_rule(30) \}
$BR
END_TEXT

$ans = $len1;
&ANS(std_num_cmp($ans));

BEGIN_TEXT
The x co-ordinate of the midpoint of the line
segment that joins them is:\{ans_rule(20) \}
$BR
END_TEXT
$ans = $midx;
&ANS(std_num_cmp($ans));

BEGIN_TEXT
The y co-ordinate of the midpoint of the line segment that joins them is:
\{ans_rule(20) \}
$BR
END_TEXT
$ans = $midy;
&ANS(std_num_cmp($ans));


sub custom_problem_grader {
	my $rh_evaluated_answers = shift;
	my $rh_problem_state = shift;
	my %form_options = @_;
	my %evaluated_answers = %{$rh_evaluated_answers};
	#  The hash $rh_evaluated_answers typically contains: 
	#      'answer1' => 34, 'answer2'=> 'Mozart', etc.
	
	# By default the  old problem state is simply passed back out again.
	my %problem_state = %$rh_problem_state;
	
 	
 	# %form_options might include
 	# The user login name 
 	# The permission level of the user
 	# The studentLogin name for this psvn.
 	# Whether the form is asking for a refresh or is submitting a new answer.
 	
 	# initial setup of the answer
 	my	$total=0; 
 	my %problem_result = ( score => 0,
 						   errors => '',
 						   type => 'custom_problem_grader',
 						   msg => 'Part 1 is worth 50% and parts 2 and 3 are worth 25% each.',
 						 );

    # Return unless answers have been submitted
    unless ($form_options{answers_submitted} == 1) {
 		return(~~%problem_result,~~%problem_state);
 	}
 	# Answers have been submitted -- process them.
 	
	$total += .5*($evaluated_answers{'AnSwEr1'}->{score});
	$total += .25*($evaluated_answers{'AnSwEr2'}->{score});
	$total += .25*($evaluated_answers{'AnSwEr3'}->{score});


	$problem_result{score} = $total; 
	# increase recorded score if the current score is greater.
	$problem_state{recorded_score} = $problem_result{score} if $problem_result{score} > $problem_state{recorded_score};
	
	
    $problem_state{num_of_correct_ans}++ if $total == 1;
	$problem_state{num_of_incorrect_ans}++ if $total < 1 ;
	(~~%problem_result, ~~%problem_state);

}


ENDDOCUMENT();        # This should be the last executable line in the problem.


